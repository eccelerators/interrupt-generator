-- Copyright (C) 2023 Eccelerators GmbH
-- 
-- This code was generated by:
--
-- HxS Compiler 1.0.19-10671667
-- VHDL Extension for HxS 1.0.21-b962bd24
-- 
-- Further information at https://eccelerators.com/hxs
-- 
-- Changes to this file may cause incorrect behavior and will be lost if the
-- code is regenerated.
library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;

use work.InterruptGeneratorIfcPackage.all;

entity InterruptGeneratorBlk_InterruptGeneratorIfc is
	port (
		Clk : in std_logic;
		Rst : in std_logic;
		ReadMatch : out std_logic;
		ReadAck : out std_logic;
		ReadData : out std_logic_vector(31 downto 0);
		ReadResp : out std_logic_vector(1 downto 0);
		Read : in std_logic;
		ReadAddressMatch : in std_logic;
		ReadAddressProt : in std_logic_vector(2 downto 0);
		ReadAddress : in std_logic_vector(15 downto 0);
		WriteMatch : out std_logic;
		WriteAck : out std_logic;
		WriteResp : out std_logic_vector(1 downto 0);
		Write : in std_logic;
		WriteAddrMatch : in std_logic;
		WriteAddressProt : in std_logic_vector(2 downto 0);
		WriteAddress : in std_logic_vector(15 downto 0);
		WriteData : in std_logic_vector(31 downto 0);
		WriteStrobe : in std_logic_vector(3 downto 0);
		ControlReg_ChannelOperation0 : out std_logic;
		ControlReg_ChannelOperation1 : out std_logic;
		ControlReg_ChannelOperation2 : out std_logic;
		ControlReg_ChannelOperation3 : out std_logic;
		StatusReg_ChannelStatus0 : in std_logic_vector(1 downto 0);
		StatusReg_ChannelStatus1 : in std_logic_vector(1 downto 0);
		StatusReg_ChannelStatus2 : in std_logic_vector(1 downto 0);
		StatusReg_ChannelStatus3 : in std_logic_vector(1 downto 0);
		ChargedCountReg0_Count : out std_logic_vector(31 downto 0);
		ChargedCountReg1_Count : out std_logic_vector(31 downto 0);
		ChargedCountReg2_Count : out std_logic_vector(31 downto 0);
		ChargedCountReg3_Count : out std_logic_vector(31 downto 0);
		ActualCountReg0_Count : in std_logic_vector(31 downto 0);
		ActualCountReg1_Count : in std_logic_vector(31 downto 0);
		ActualCountReg2_Count : in std_logic_vector(31 downto 0);
		ActualCountReg3_Count : in std_logic_vector(31 downto 0);
		FailureCountReg0_Count : in std_logic_vector(31 downto 0);
		FailureCountReg1_Count : in std_logic_vector(31 downto 0);
		FailureCountReg2_Count : in std_logic_vector(31 downto 0);
		FailureCountReg3_Count : in std_logic_vector(31 downto 0);
		IntervalReg0_Interval : out std_logic_vector(31 downto 0);
		IntervalReg1_Interval : out std_logic_vector(31 downto 0);
		IntervalReg2_Interval : out std_logic_vector(31 downto 0);
		IntervalReg3_Interval : out std_logic_vector(31 downto 0);
		ReferenceCountReg0_Count : out std_logic_vector(31 downto 0);
		ReferenceCountReg1_Count : out std_logic_vector(31 downto 0);
		ReferenceCountReg2_Count : out std_logic_vector(31 downto 0);
		ReferenceCountReg3_Count : out std_logic_vector(31 downto 0)
	);
end;

architecture Behavioural of InterruptGeneratorBlk_InterruptGeneratorIfc is

	signal PreReadData : std_logic_vector(31 downto 0);
	
	signal PreReadDataControlReg : std_logic_vector(3 downto 0);
	signal PreReadAckControlReg : std_logic;
	signal ReadDiffControlReg : std_logic;
	signal PreWriteAckControlReg : std_logic;
	signal WriteDiffControlReg : std_logic;
	signal WRegControlReg_ChannelOperation0 : std_logic;
	signal WRegControlReg_ChannelOperation1 : std_logic;
	signal WRegControlReg_ChannelOperation2 : std_logic;
	signal WRegControlReg_ChannelOperation3 : std_logic;
	signal PreMatchReadControlReg : std_logic;
	signal PreMatchWriteControlReg : std_logic;
	
	signal PreReadDataStatusReg : std_logic_vector(3 downto 0);
	signal PreReadAckStatusReg : std_logic;
	signal ReadDiffStatusReg : std_logic;
	signal PreMatchReadStatusReg : std_logic;
	
	signal PreReadDataChargedCountReg0 : std_logic_vector(31 downto 0);
	signal PreReadAckChargedCountReg0 : std_logic;
	signal ReadDiffChargedCountReg0 : std_logic;
	signal PreWriteAckChargedCountReg0 : std_logic;
	signal WriteDiffChargedCountReg0 : std_logic;
	signal WRegChargedCountReg0_Count : std_logic_vector(31 downto 0);
	signal PreMatchReadChargedCountReg0 : std_logic;
	signal PreMatchWriteChargedCountReg0 : std_logic;
	
	signal PreReadDataChargedCountReg1 : std_logic_vector(31 downto 0);
	signal PreReadAckChargedCountReg1 : std_logic;
	signal ReadDiffChargedCountReg1 : std_logic;
	signal PreWriteAckChargedCountReg1 : std_logic;
	signal WriteDiffChargedCountReg1 : std_logic;
	signal WRegChargedCountReg1_Count : std_logic_vector(31 downto 0);
	signal PreMatchReadChargedCountReg1 : std_logic;
	signal PreMatchWriteChargedCountReg1 : std_logic;
	
	signal PreReadDataChargedCountReg2 : std_logic_vector(31 downto 0);
	signal PreReadAckChargedCountReg2 : std_logic;
	signal ReadDiffChargedCountReg2 : std_logic;
	signal PreWriteAckChargedCountReg2 : std_logic;
	signal WriteDiffChargedCountReg2 : std_logic;
	signal WRegChargedCountReg2_Count : std_logic_vector(31 downto 0);
	signal PreMatchReadChargedCountReg2 : std_logic;
	signal PreMatchWriteChargedCountReg2 : std_logic;
	
	signal PreReadDataChargedCountReg3 : std_logic_vector(31 downto 0);
	signal PreReadAckChargedCountReg3 : std_logic;
	signal ReadDiffChargedCountReg3 : std_logic;
	signal PreWriteAckChargedCountReg3 : std_logic;
	signal WriteDiffChargedCountReg3 : std_logic;
	signal WRegChargedCountReg3_Count : std_logic_vector(31 downto 0);
	signal PreMatchReadChargedCountReg3 : std_logic;
	signal PreMatchWriteChargedCountReg3 : std_logic;
	
	signal PreReadDataActualCountReg0 : std_logic_vector(31 downto 0);
	signal PreReadAckActualCountReg0 : std_logic;
	signal ReadDiffActualCountReg0 : std_logic;
	signal PreMatchReadActualCountReg0 : std_logic;
	
	signal PreReadDataActualCountReg1 : std_logic_vector(31 downto 0);
	signal PreReadAckActualCountReg1 : std_logic;
	signal ReadDiffActualCountReg1 : std_logic;
	signal PreMatchReadActualCountReg1 : std_logic;
	
	signal PreReadDataActualCountReg2 : std_logic_vector(31 downto 0);
	signal PreReadAckActualCountReg2 : std_logic;
	signal ReadDiffActualCountReg2 : std_logic;
	signal PreMatchReadActualCountReg2 : std_logic;
	
	signal PreReadDataActualCountReg3 : std_logic_vector(31 downto 0);
	signal PreReadAckActualCountReg3 : std_logic;
	signal ReadDiffActualCountReg3 : std_logic;
	signal PreMatchReadActualCountReg3 : std_logic;
	
	signal PreReadDataFailureCountReg0 : std_logic_vector(31 downto 0);
	signal PreReadAckFailureCountReg0 : std_logic;
	signal ReadDiffFailureCountReg0 : std_logic;
	signal PreMatchReadFailureCountReg0 : std_logic;
	
	signal PreReadDataFailureCountReg1 : std_logic_vector(31 downto 0);
	signal PreReadAckFailureCountReg1 : std_logic;
	signal ReadDiffFailureCountReg1 : std_logic;
	signal PreMatchReadFailureCountReg1 : std_logic;
	
	signal PreReadDataFailureCountReg2 : std_logic_vector(31 downto 0);
	signal PreReadAckFailureCountReg2 : std_logic;
	signal ReadDiffFailureCountReg2 : std_logic;
	signal PreMatchReadFailureCountReg2 : std_logic;
	
	signal PreReadDataFailureCountReg3 : std_logic_vector(31 downto 0);
	signal PreReadAckFailureCountReg3 : std_logic;
	signal ReadDiffFailureCountReg3 : std_logic;
	signal PreMatchReadFailureCountReg3 : std_logic;
	
	signal PreReadDataIntervalReg0 : std_logic_vector(31 downto 0);
	signal PreReadAckIntervalReg0 : std_logic;
	signal ReadDiffIntervalReg0 : std_logic;
	signal PreWriteAckIntervalReg0 : std_logic;
	signal WriteDiffIntervalReg0 : std_logic;
	signal WRegIntervalReg0_Interval : std_logic_vector(31 downto 0);
	signal PreMatchReadIntervalReg0 : std_logic;
	signal PreMatchWriteIntervalReg0 : std_logic;
	
	signal PreReadDataIntervalReg1 : std_logic_vector(31 downto 0);
	signal PreReadAckIntervalReg1 : std_logic;
	signal ReadDiffIntervalReg1 : std_logic;
	signal PreWriteAckIntervalReg1 : std_logic;
	signal WriteDiffIntervalReg1 : std_logic;
	signal WRegIntervalReg1_Interval : std_logic_vector(31 downto 0);
	signal PreMatchReadIntervalReg1 : std_logic;
	signal PreMatchWriteIntervalReg1 : std_logic;
	
	signal PreReadDataIntervalReg2 : std_logic_vector(31 downto 0);
	signal PreReadAckIntervalReg2 : std_logic;
	signal ReadDiffIntervalReg2 : std_logic;
	signal PreWriteAckIntervalReg2 : std_logic;
	signal WriteDiffIntervalReg2 : std_logic;
	signal WRegIntervalReg2_Interval : std_logic_vector(31 downto 0);
	signal PreMatchReadIntervalReg2 : std_logic;
	signal PreMatchWriteIntervalReg2 : std_logic;
	
	signal PreReadDataIntervalReg3 : std_logic_vector(31 downto 0);
	signal PreReadAckIntervalReg3 : std_logic;
	signal ReadDiffIntervalReg3 : std_logic;
	signal PreWriteAckIntervalReg3 : std_logic;
	signal WriteDiffIntervalReg3 : std_logic;
	signal WRegIntervalReg3_Interval : std_logic_vector(31 downto 0);
	signal PreMatchReadIntervalReg3 : std_logic;
	signal PreMatchWriteIntervalReg3 : std_logic;
	
	signal PreReadDataReferenceCountReg0 : std_logic_vector(31 downto 0);
	signal PreReadAckReferenceCountReg0 : std_logic;
	signal ReadDiffReferenceCountReg0 : std_logic;
	signal PreWriteAckReferenceCountReg0 : std_logic;
	signal WriteDiffReferenceCountReg0 : std_logic;
	signal WRegReferenceCountReg0_Count : std_logic_vector(31 downto 0);
	signal PreMatchReadReferenceCountReg0 : std_logic;
	signal PreMatchWriteReferenceCountReg0 : std_logic;
	
	signal PreReadDataReferenceCountReg1 : std_logic_vector(31 downto 0);
	signal PreReadAckReferenceCountReg1 : std_logic;
	signal ReadDiffReferenceCountReg1 : std_logic;
	signal PreWriteAckReferenceCountReg1 : std_logic;
	signal WriteDiffReferenceCountReg1 : std_logic;
	signal WRegReferenceCountReg1_Count : std_logic_vector(31 downto 0);
	signal PreMatchReadReferenceCountReg1 : std_logic;
	signal PreMatchWriteReferenceCountReg1 : std_logic;
	
	signal PreReadDataReferenceCountReg2 : std_logic_vector(31 downto 0);
	signal PreReadAckReferenceCountReg2 : std_logic;
	signal ReadDiffReferenceCountReg2 : std_logic;
	signal PreWriteAckReferenceCountReg2 : std_logic;
	signal WriteDiffReferenceCountReg2 : std_logic;
	signal WRegReferenceCountReg2_Count : std_logic_vector(31 downto 0);
	signal PreMatchReadReferenceCountReg2 : std_logic;
	signal PreMatchWriteReferenceCountReg2 : std_logic;
	
	signal PreReadDataReferenceCountReg3 : std_logic_vector(31 downto 0);
	signal PreReadAckReferenceCountReg3 : std_logic;
	signal ReadDiffReferenceCountReg3 : std_logic;
	signal PreWriteAckReferenceCountReg3 : std_logic;
	signal WriteDiffReferenceCountReg3 : std_logic;
	signal WRegReferenceCountReg3_Count : std_logic_vector(31 downto 0);
	signal PreMatchReadReferenceCountReg3 : std_logic;
	signal PreMatchWriteReferenceCountReg3 : std_logic;

begin

	ReadMatch <= PreMatchReadControlReg
		  or PreMatchReadStatusReg
		  or PreMatchReadChargedCountReg0
		  or PreMatchReadChargedCountReg1
		  or PreMatchReadChargedCountReg2
		  or PreMatchReadChargedCountReg3
		  or PreMatchReadActualCountReg0
		  or PreMatchReadActualCountReg1
		  or PreMatchReadActualCountReg2
		  or PreMatchReadActualCountReg3
		  or PreMatchReadFailureCountReg0
		  or PreMatchReadFailureCountReg1
		  or PreMatchReadFailureCountReg2
		  or PreMatchReadFailureCountReg3
		  or PreMatchReadIntervalReg0
		  or PreMatchReadIntervalReg1
		  or PreMatchReadIntervalReg2
		  or PreMatchReadIntervalReg3
		  or PreMatchReadReferenceCountReg0
		  or PreMatchReadReferenceCountReg1
		  or PreMatchReadReferenceCountReg2
		  or PreMatchReadReferenceCountReg3;
	WriteMatch <= PreMatchWriteControlReg
		  or PreMatchWriteChargedCountReg0
		  or PreMatchWriteChargedCountReg1
		  or PreMatchWriteChargedCountReg2
		  or PreMatchWriteChargedCountReg3
		  or PreMatchWriteIntervalReg0
		  or PreMatchWriteIntervalReg1
		  or PreMatchWriteIntervalReg2
		  or PreMatchWriteIntervalReg3
		  or PreMatchWriteReferenceCountReg0
		  or PreMatchWriteReferenceCountReg1
		  or PreMatchWriteReferenceCountReg2
		  or PreMatchWriteReferenceCountReg3;
	
	ReadAck <= PreReadAckControlReg
		or PreReadAckStatusReg
		or PreReadAckChargedCountReg0
		or PreReadAckChargedCountReg1
		or PreReadAckChargedCountReg2
		or PreReadAckChargedCountReg3
		or PreReadAckActualCountReg0
		or PreReadAckActualCountReg1
		or PreReadAckActualCountReg2
		or PreReadAckActualCountReg3
		or PreReadAckFailureCountReg0
		or PreReadAckFailureCountReg1
		or PreReadAckFailureCountReg2
		or PreReadAckFailureCountReg3
		or PreReadAckIntervalReg0
		or PreReadAckIntervalReg1
		or PreReadAckIntervalReg2
		or PreReadAckIntervalReg3
		or PreReadAckReferenceCountReg0
		or PreReadAckReferenceCountReg1
		or PreReadAckReferenceCountReg2
		or PreReadAckReferenceCountReg3;
	
	WriteAck <= PreWriteAckControlReg
		or PreWriteAckStatusReg
		or PreWriteAckChargedCountReg0
		or PreWriteAckChargedCountReg1
		or PreWriteAckChargedCountReg2
		or PreWriteAckChargedCountReg3
		or PreWriteAckActualCountReg0
		or PreWriteAckActualCountReg1
		or PreWriteAckActualCountReg2
		or PreWriteAckActualCountReg3
		or PreWriteAckFailureCountReg0
		or PreWriteAckFailureCountReg1
		or PreWriteAckFailureCountReg2
		or PreWriteAckFailureCountReg3
		or PreWriteAckIntervalReg0
		or PreWriteAckIntervalReg1
		or PreWriteAckIntervalReg2
		or PreWriteAckIntervalReg3
		or PreWriteAckReferenceCountReg0
		or PreWriteAckReferenceCountReg1
		or PreWriteAckReferenceCountReg2
		or PreWriteAckReferenceCountReg3;
	
	
	ReadData <= PreReadData;
	
	ReadResp <= (others => '0');
	WriteResp <= (others => '0');
	
	PreDatOutMux: process (
		PreReadDataControlReg,
		PreMatchReadControlReg,
		PreReadAckControlReg,
		PreReadDataStatusReg,
		PreMatchReadStatusReg,
		PreReadAckStatusReg,
		PreReadDataChargedCountReg0,
		PreMatchReadChargedCountReg0,
		PreReadAckChargedCountReg0,
		PreReadDataChargedCountReg1,
		PreMatchReadChargedCountReg1,
		PreReadAckChargedCountReg1,
		PreReadDataChargedCountReg2,
		PreMatchReadChargedCountReg2,
		PreReadAckChargedCountReg2,
		PreReadDataChargedCountReg3,
		PreMatchReadChargedCountReg3,
		PreReadAckChargedCountReg3,
		PreReadDataActualCountReg0,
		PreMatchReadActualCountReg0,
		PreReadAckActualCountReg0,
		PreReadDataActualCountReg1,
		PreMatchReadActualCountReg1,
		PreReadAckActualCountReg1,
		PreReadDataActualCountReg2,
		PreMatchReadActualCountReg2,
		PreReadAckActualCountReg2,
		PreReadDataActualCountReg3,
		PreMatchReadActualCountReg3,
		PreReadAckActualCountReg3,
		PreReadDataFailureCountReg0,
		PreMatchReadFailureCountReg0,
		PreReadAckFailureCountReg0,
		PreReadDataFailureCountReg1,
		PreMatchReadFailureCountReg1,
		PreReadAckFailureCountReg1,
		PreReadDataFailureCountReg2,
		PreMatchReadFailureCountReg2,
		PreReadAckFailureCountReg2,
		PreReadDataFailureCountReg3,
		PreMatchReadFailureCountReg3,
		PreReadAckFailureCountReg3,
		PreReadDataIntervalReg0,
		PreMatchReadIntervalReg0,
		PreReadAckIntervalReg0,
		PreReadDataIntervalReg1,
		PreMatchReadIntervalReg1,
		PreReadAckIntervalReg1,
		PreReadDataIntervalReg2,
		PreMatchReadIntervalReg2,
		PreReadAckIntervalReg2,
		PreReadDataIntervalReg3,
		PreMatchReadIntervalReg3,
		PreReadAckIntervalReg3,
		PreReadDataReferenceCountReg0,
		PreMatchReadReferenceCountReg0,
		PreReadAckReferenceCountReg0,
		PreReadDataReferenceCountReg1,
		PreMatchReadReferenceCountReg1,
		PreReadAckReferenceCountReg1,
		PreReadDataReferenceCountReg2,
		PreMatchReadReferenceCountReg2,
		PreReadAckReferenceCountReg2,
		PreReadDataReferenceCountReg3,
		PreMatchReadReferenceCountReg3,
		PreReadAckReferenceCountReg3
	) begin
		PreReadData <= (others => '0');
		if (PreMatchReadControlReg = '1' and PreReadAckControlReg = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataControlReg), PreReadData'LENGTH));
		elsif (PreMatchReadStatusReg = '1' and PreReadAckStatusReg = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataStatusReg), PreReadData'LENGTH));
		elsif (PreMatchReadChargedCountReg0 = '1' and PreReadAckChargedCountReg0 = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataChargedCountReg0), PreReadData'LENGTH));
		elsif (PreMatchReadChargedCountReg1 = '1' and PreReadAckChargedCountReg1 = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataChargedCountReg1), PreReadData'LENGTH));
		elsif (PreMatchReadChargedCountReg2 = '1' and PreReadAckChargedCountReg2 = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataChargedCountReg2), PreReadData'LENGTH));
		elsif (PreMatchReadChargedCountReg3 = '1' and PreReadAckChargedCountReg3 = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataChargedCountReg3), PreReadData'LENGTH));
		elsif (PreMatchReadActualCountReg0 = '1' and PreReadAckActualCountReg0 = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataActualCountReg0), PreReadData'LENGTH));
		elsif (PreMatchReadActualCountReg1 = '1' and PreReadAckActualCountReg1 = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataActualCountReg1), PreReadData'LENGTH));
		elsif (PreMatchReadActualCountReg2 = '1' and PreReadAckActualCountReg2 = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataActualCountReg2), PreReadData'LENGTH));
		elsif (PreMatchReadActualCountReg3 = '1' and PreReadAckActualCountReg3 = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataActualCountReg3), PreReadData'LENGTH));
		elsif (PreMatchReadFailureCountReg0 = '1' and PreReadAckFailureCountReg0 = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataFailureCountReg0), PreReadData'LENGTH));
		elsif (PreMatchReadFailureCountReg1 = '1' and PreReadAckFailureCountReg1 = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataFailureCountReg1), PreReadData'LENGTH));
		elsif (PreMatchReadFailureCountReg2 = '1' and PreReadAckFailureCountReg2 = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataFailureCountReg2), PreReadData'LENGTH));
		elsif (PreMatchReadFailureCountReg3 = '1' and PreReadAckFailureCountReg3 = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataFailureCountReg3), PreReadData'LENGTH));
		elsif (PreMatchReadIntervalReg0 = '1' and PreReadAckIntervalReg0 = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataIntervalReg0), PreReadData'LENGTH));
		elsif (PreMatchReadIntervalReg1 = '1' and PreReadAckIntervalReg1 = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataIntervalReg1), PreReadData'LENGTH));
		elsif (PreMatchReadIntervalReg2 = '1' and PreReadAckIntervalReg2 = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataIntervalReg2), PreReadData'LENGTH));
		elsif (PreMatchReadIntervalReg3 = '1' and PreReadAckIntervalReg3 = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataIntervalReg3), PreReadData'LENGTH));
		elsif (PreMatchReadReferenceCountReg0 = '1' and PreReadAckReferenceCountReg0 = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataReferenceCountReg0), PreReadData'LENGTH));
		elsif (PreMatchReadReferenceCountReg1 = '1' and PreReadAckReferenceCountReg1 = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataReferenceCountReg1), PreReadData'LENGTH));
		elsif (PreMatchReadReferenceCountReg2 = '1' and PreReadAckReferenceCountReg2 = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataReferenceCountReg2), PreReadData'LENGTH));
		elsif (PreMatchReadReferenceCountReg3 = '1' and PreReadAckReferenceCountReg3 = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataReferenceCountReg3), PreReadData'LENGTH));
		end if;
	end process;
	
	PreMatchReadControlRegProcess : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(CONTROLREG_ADDRESS)) then
			PreMatchReadControlReg <= ReadAddressMatch;
		else
			PreMatchReadControlReg <= '0';
		end if;
	end process;
	
	PreMatchWriteControlRegProcess : process (WriteAddress, WriteAddrMatch)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(CONTROLREG_ADDRESS)) then
			PreMatchWriteControlReg <= WriteAddrMatch;
		else
			PreMatchWriteControlReg <= '0';
		end if;
	end process;
	
	WriteDiffControlRegProcess : process (WriteAddress, Write, PreWriteAckControlReg)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(CONTROLREG_ADDRESS)) then
			WriteDiffControlReg <=  Write and not PreWriteAckControlReg;
		else
			WriteDiffControlReg <= '0';
		end if;
	end process;
	
	ReadDiffControlRegProcess : process (ReadAddress, Read, PreReadAckControlReg)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(CONTROLREG_ADDRESS)) then
			ReadDiffControlReg <= Read and not PreReadAckControlReg;
		else
			ReadDiffControlReg <= '0';
		end if;
	end process;
	
	SyncPartControlReg : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckControlReg <= '0';
			PreWriteAckControlReg <= '0';
			WRegControlReg_ChannelOperation0 <= CONTROLREG_CHANNELOPERATION0_ENABLED;
			WRegControlReg_ChannelOperation1 <= CONTROLREG_CHANNELOPERATION1_ENABLED;
			WRegControlReg_ChannelOperation2 <= CONTROLREG_CHANNELOPERATION2_ENABLED;
			WRegControlReg_ChannelOperation3 <= CONTROLREG_CHANNELOPERATION3_ENABLED;
		elsif rising_edge(Clk) then
			PreWriteAckControlReg <= WriteDiffControlReg;
			PreReadAckControlReg <= ReadDiffControlReg;
			if (WriteDiffControlReg = '1') then
				if (WriteStrobe(0) = '1') then WRegControlReg_ChannelOperation3 <= WriteData(0); end if;
				if (WriteStrobe(0) = '1') then WRegControlReg_ChannelOperation2 <= WriteData(1); end if;
				if (WriteStrobe(0) = '1') then WRegControlReg_ChannelOperation1 <= WriteData(2); end if;
				if (WriteStrobe(0) = '1') then WRegControlReg_ChannelOperation0 <= WriteData(3); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForControlReg : process (
		WRegControlReg_ChannelOperation0,
		WRegControlReg_ChannelOperation1,
		WRegControlReg_ChannelOperation2,
		WRegControlReg_ChannelOperation3
	) begin
		PreReadDataControlReg <= (others => '0');
		PreReadDataControlReg(3) <= WRegControlReg_ChannelOperation0;
		PreReadDataControlReg(2) <= WRegControlReg_ChannelOperation1;
		PreReadDataControlReg(1) <= WRegControlReg_ChannelOperation2;
		PreReadDataControlReg(0) <= WRegControlReg_ChannelOperation3;
	end process;
	
	ControlReg_ChannelOperation0 <= WRegControlReg_ChannelOperation0;
	ControlReg_ChannelOperation1 <= WRegControlReg_ChannelOperation1;
	ControlReg_ChannelOperation2 <= WRegControlReg_ChannelOperation2;
	ControlReg_ChannelOperation3 <= WRegControlReg_ChannelOperation3;
	
	PreMatchReadStatusRegProcess : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(STATUSREG_ADDRESS)) then
			PreMatchReadStatusReg <= ReadAddressMatch;
		else
			PreMatchReadStatusReg <= '0';
		end if;
	end process;
	
	ReadDiffStatusRegProcess : process (ReadAddress, Read, PreReadAckStatusReg)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(STATUSREG_ADDRESS)) then
			ReadDiffStatusReg <= Read and not PreReadAckStatusReg;
		else
			ReadDiffStatusReg <= '0';
		end if;
	end process;
	
	SyncPartStatusReg : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckStatusReg <= '0';
		elsif rising_edge(Clk) then
			PreReadAckStatusReg <= ReadDiffStatusReg;
		end if;
	end process;
	
	DataOutPreMuxForStatusReg : process (
		StatusReg_ChannelStatus0,
		StatusReg_ChannelStatus1,
		StatusReg_ChannelStatus2,
		StatusReg_ChannelStatus3
	) begin
		PreReadDataStatusReg <= (others => '0');
		PreReadDataStatusReg(7 downto 6) <= StatusReg_ChannelStatus0;
		PreReadDataStatusReg(5 downto 4) <= StatusReg_ChannelStatus1;
		PreReadDataStatusReg(3 downto 2) <= StatusReg_ChannelStatus2;
		PreReadDataStatusReg(1 downto 0) <= StatusReg_ChannelStatus3;
	end process;
	
	PreMatchReadChargedCountReg0Process : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(CHARGEDCOUNTREG0_ADDRESS)) then
			PreMatchReadChargedCountReg0 <= ReadAddressMatch;
		else
			PreMatchReadChargedCountReg0 <= '0';
		end if;
	end process;
	
	PreMatchWriteChargedCountReg0Process : process (WriteAddress, WriteAddrMatch)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(CHARGEDCOUNTREG0_ADDRESS)) then
			PreMatchWriteChargedCountReg0 <= WriteAddrMatch;
		else
			PreMatchWriteChargedCountReg0 <= '0';
		end if;
	end process;
	
	WriteDiffChargedCountReg0Process : process (WriteAddress, Write, PreWriteAckChargedCountReg0)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(CHARGEDCOUNTREG0_ADDRESS)) then
			WriteDiffChargedCountReg0 <=  Write and not PreWriteAckChargedCountReg0;
		else
			WriteDiffChargedCountReg0 <= '0';
		end if;
	end process;
	
	ReadDiffChargedCountReg0Process : process (ReadAddress, Read, PreReadAckChargedCountReg0)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(CHARGEDCOUNTREG0_ADDRESS)) then
			ReadDiffChargedCountReg0 <= Read and not PreReadAckChargedCountReg0;
		else
			ReadDiffChargedCountReg0 <= '0';
		end if;
	end process;
	
	SyncPartChargedCountReg0 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckChargedCountReg0 <= '0';
			PreWriteAckChargedCountReg0 <= '0';
			WRegChargedCountReg0_Count <= (others => '0');
		elsif rising_edge(Clk) then
			PreWriteAckChargedCountReg0 <= WriteDiffChargedCountReg0;
			PreReadAckChargedCountReg0 <= ReadDiffChargedCountReg0;
			if (WriteDiffChargedCountReg0 = '1') then
				if (WriteStrobe(3) = '1') then WRegChargedCountReg0_Count(31 downto 24) <= WriteData(31 downto 24); end if;
				if (WriteStrobe(2) = '1') then WRegChargedCountReg0_Count(23 downto 16) <= WriteData(23 downto 16); end if;
				if (WriteStrobe(1) = '1') then WRegChargedCountReg0_Count(15 downto 8) <= WriteData(15 downto 8); end if;
				if (WriteStrobe(0) = '1') then WRegChargedCountReg0_Count(7 downto 0) <= WriteData(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForChargedCountReg0 : process (
		WRegChargedCountReg0_Count
	) begin
		PreReadDataChargedCountReg0 <= (others => '0');
		PreReadDataChargedCountReg0(31 downto 0) <= WRegChargedCountReg0_Count;
	end process;
	
	ChargedCountReg0_Count <= WRegChargedCountReg0_Count;
	
	PreMatchReadChargedCountReg1Process : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(CHARGEDCOUNTREG1_ADDRESS)) then
			PreMatchReadChargedCountReg1 <= ReadAddressMatch;
		else
			PreMatchReadChargedCountReg1 <= '0';
		end if;
	end process;
	
	PreMatchWriteChargedCountReg1Process : process (WriteAddress, WriteAddrMatch)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(CHARGEDCOUNTREG1_ADDRESS)) then
			PreMatchWriteChargedCountReg1 <= WriteAddrMatch;
		else
			PreMatchWriteChargedCountReg1 <= '0';
		end if;
	end process;
	
	WriteDiffChargedCountReg1Process : process (WriteAddress, Write, PreWriteAckChargedCountReg1)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(CHARGEDCOUNTREG1_ADDRESS)) then
			WriteDiffChargedCountReg1 <=  Write and not PreWriteAckChargedCountReg1;
		else
			WriteDiffChargedCountReg1 <= '0';
		end if;
	end process;
	
	ReadDiffChargedCountReg1Process : process (ReadAddress, Read, PreReadAckChargedCountReg1)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(CHARGEDCOUNTREG1_ADDRESS)) then
			ReadDiffChargedCountReg1 <= Read and not PreReadAckChargedCountReg1;
		else
			ReadDiffChargedCountReg1 <= '0';
		end if;
	end process;
	
	SyncPartChargedCountReg1 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckChargedCountReg1 <= '0';
			PreWriteAckChargedCountReg1 <= '0';
			WRegChargedCountReg1_Count <= (others => '0');
		elsif rising_edge(Clk) then
			PreWriteAckChargedCountReg1 <= WriteDiffChargedCountReg1;
			PreReadAckChargedCountReg1 <= ReadDiffChargedCountReg1;
			if (WriteDiffChargedCountReg1 = '1') then
				if (WriteStrobe(3) = '1') then WRegChargedCountReg1_Count(31 downto 24) <= WriteData(31 downto 24); end if;
				if (WriteStrobe(2) = '1') then WRegChargedCountReg1_Count(23 downto 16) <= WriteData(23 downto 16); end if;
				if (WriteStrobe(1) = '1') then WRegChargedCountReg1_Count(15 downto 8) <= WriteData(15 downto 8); end if;
				if (WriteStrobe(0) = '1') then WRegChargedCountReg1_Count(7 downto 0) <= WriteData(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForChargedCountReg1 : process (
		WRegChargedCountReg1_Count
	) begin
		PreReadDataChargedCountReg1 <= (others => '0');
		PreReadDataChargedCountReg1(31 downto 0) <= WRegChargedCountReg1_Count;
	end process;
	
	ChargedCountReg1_Count <= WRegChargedCountReg1_Count;
	
	PreMatchReadChargedCountReg2Process : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(CHARGEDCOUNTREG2_ADDRESS)) then
			PreMatchReadChargedCountReg2 <= ReadAddressMatch;
		else
			PreMatchReadChargedCountReg2 <= '0';
		end if;
	end process;
	
	PreMatchWriteChargedCountReg2Process : process (WriteAddress, WriteAddrMatch)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(CHARGEDCOUNTREG2_ADDRESS)) then
			PreMatchWriteChargedCountReg2 <= WriteAddrMatch;
		else
			PreMatchWriteChargedCountReg2 <= '0';
		end if;
	end process;
	
	WriteDiffChargedCountReg2Process : process (WriteAddress, Write, PreWriteAckChargedCountReg2)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(CHARGEDCOUNTREG2_ADDRESS)) then
			WriteDiffChargedCountReg2 <=  Write and not PreWriteAckChargedCountReg2;
		else
			WriteDiffChargedCountReg2 <= '0';
		end if;
	end process;
	
	ReadDiffChargedCountReg2Process : process (ReadAddress, Read, PreReadAckChargedCountReg2)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(CHARGEDCOUNTREG2_ADDRESS)) then
			ReadDiffChargedCountReg2 <= Read and not PreReadAckChargedCountReg2;
		else
			ReadDiffChargedCountReg2 <= '0';
		end if;
	end process;
	
	SyncPartChargedCountReg2 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckChargedCountReg2 <= '0';
			PreWriteAckChargedCountReg2 <= '0';
			WRegChargedCountReg2_Count <= (others => '0');
		elsif rising_edge(Clk) then
			PreWriteAckChargedCountReg2 <= WriteDiffChargedCountReg2;
			PreReadAckChargedCountReg2 <= ReadDiffChargedCountReg2;
			if (WriteDiffChargedCountReg2 = '1') then
				if (WriteStrobe(3) = '1') then WRegChargedCountReg2_Count(31 downto 24) <= WriteData(31 downto 24); end if;
				if (WriteStrobe(2) = '1') then WRegChargedCountReg2_Count(23 downto 16) <= WriteData(23 downto 16); end if;
				if (WriteStrobe(1) = '1') then WRegChargedCountReg2_Count(15 downto 8) <= WriteData(15 downto 8); end if;
				if (WriteStrobe(0) = '1') then WRegChargedCountReg2_Count(7 downto 0) <= WriteData(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForChargedCountReg2 : process (
		WRegChargedCountReg2_Count
	) begin
		PreReadDataChargedCountReg2 <= (others => '0');
		PreReadDataChargedCountReg2(31 downto 0) <= WRegChargedCountReg2_Count;
	end process;
	
	ChargedCountReg2_Count <= WRegChargedCountReg2_Count;
	
	PreMatchReadChargedCountReg3Process : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(CHARGEDCOUNTREG3_ADDRESS)) then
			PreMatchReadChargedCountReg3 <= ReadAddressMatch;
		else
			PreMatchReadChargedCountReg3 <= '0';
		end if;
	end process;
	
	PreMatchWriteChargedCountReg3Process : process (WriteAddress, WriteAddrMatch)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(CHARGEDCOUNTREG3_ADDRESS)) then
			PreMatchWriteChargedCountReg3 <= WriteAddrMatch;
		else
			PreMatchWriteChargedCountReg3 <= '0';
		end if;
	end process;
	
	WriteDiffChargedCountReg3Process : process (WriteAddress, Write, PreWriteAckChargedCountReg3)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(CHARGEDCOUNTREG3_ADDRESS)) then
			WriteDiffChargedCountReg3 <=  Write and not PreWriteAckChargedCountReg3;
		else
			WriteDiffChargedCountReg3 <= '0';
		end if;
	end process;
	
	ReadDiffChargedCountReg3Process : process (ReadAddress, Read, PreReadAckChargedCountReg3)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(CHARGEDCOUNTREG3_ADDRESS)) then
			ReadDiffChargedCountReg3 <= Read and not PreReadAckChargedCountReg3;
		else
			ReadDiffChargedCountReg3 <= '0';
		end if;
	end process;
	
	SyncPartChargedCountReg3 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckChargedCountReg3 <= '0';
			PreWriteAckChargedCountReg3 <= '0';
			WRegChargedCountReg3_Count <= (others => '0');
		elsif rising_edge(Clk) then
			PreWriteAckChargedCountReg3 <= WriteDiffChargedCountReg3;
			PreReadAckChargedCountReg3 <= ReadDiffChargedCountReg3;
			if (WriteDiffChargedCountReg3 = '1') then
				if (WriteStrobe(3) = '1') then WRegChargedCountReg3_Count(31 downto 24) <= WriteData(31 downto 24); end if;
				if (WriteStrobe(2) = '1') then WRegChargedCountReg3_Count(23 downto 16) <= WriteData(23 downto 16); end if;
				if (WriteStrobe(1) = '1') then WRegChargedCountReg3_Count(15 downto 8) <= WriteData(15 downto 8); end if;
				if (WriteStrobe(0) = '1') then WRegChargedCountReg3_Count(7 downto 0) <= WriteData(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForChargedCountReg3 : process (
		WRegChargedCountReg3_Count
	) begin
		PreReadDataChargedCountReg3 <= (others => '0');
		PreReadDataChargedCountReg3(31 downto 0) <= WRegChargedCountReg3_Count;
	end process;
	
	ChargedCountReg3_Count <= WRegChargedCountReg3_Count;
	
	PreMatchReadActualCountReg0Process : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(ACTUALCOUNTREG0_ADDRESS)) then
			PreMatchReadActualCountReg0 <= ReadAddressMatch;
		else
			PreMatchReadActualCountReg0 <= '0';
		end if;
	end process;
	
	ReadDiffActualCountReg0Process : process (ReadAddress, Read, PreReadAckActualCountReg0)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(ACTUALCOUNTREG0_ADDRESS)) then
			ReadDiffActualCountReg0 <= Read and not PreReadAckActualCountReg0;
		else
			ReadDiffActualCountReg0 <= '0';
		end if;
	end process;
	
	SyncPartActualCountReg0 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckActualCountReg0 <= '0';
		elsif rising_edge(Clk) then
			PreReadAckActualCountReg0 <= ReadDiffActualCountReg0;
		end if;
	end process;
	
	DataOutPreMuxForActualCountReg0 : process (
		ActualCountReg0_Count
	) begin
		PreReadDataActualCountReg0 <= (others => '0');
		PreReadDataActualCountReg0(31 downto 0) <= ActualCountReg0_Count;
	end process;
	
	PreMatchReadActualCountReg1Process : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(ACTUALCOUNTREG1_ADDRESS)) then
			PreMatchReadActualCountReg1 <= ReadAddressMatch;
		else
			PreMatchReadActualCountReg1 <= '0';
		end if;
	end process;
	
	ReadDiffActualCountReg1Process : process (ReadAddress, Read, PreReadAckActualCountReg1)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(ACTUALCOUNTREG1_ADDRESS)) then
			ReadDiffActualCountReg1 <= Read and not PreReadAckActualCountReg1;
		else
			ReadDiffActualCountReg1 <= '0';
		end if;
	end process;
	
	SyncPartActualCountReg1 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckActualCountReg1 <= '0';
		elsif rising_edge(Clk) then
			PreReadAckActualCountReg1 <= ReadDiffActualCountReg1;
		end if;
	end process;
	
	DataOutPreMuxForActualCountReg1 : process (
		ActualCountReg1_Count
	) begin
		PreReadDataActualCountReg1 <= (others => '0');
		PreReadDataActualCountReg1(31 downto 0) <= ActualCountReg1_Count;
	end process;
	
	PreMatchReadActualCountReg2Process : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(ACTUALCOUNTREG2_ADDRESS)) then
			PreMatchReadActualCountReg2 <= ReadAddressMatch;
		else
			PreMatchReadActualCountReg2 <= '0';
		end if;
	end process;
	
	ReadDiffActualCountReg2Process : process (ReadAddress, Read, PreReadAckActualCountReg2)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(ACTUALCOUNTREG2_ADDRESS)) then
			ReadDiffActualCountReg2 <= Read and not PreReadAckActualCountReg2;
		else
			ReadDiffActualCountReg2 <= '0';
		end if;
	end process;
	
	SyncPartActualCountReg2 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckActualCountReg2 <= '0';
		elsif rising_edge(Clk) then
			PreReadAckActualCountReg2 <= ReadDiffActualCountReg2;
		end if;
	end process;
	
	DataOutPreMuxForActualCountReg2 : process (
		ActualCountReg2_Count
	) begin
		PreReadDataActualCountReg2 <= (others => '0');
		PreReadDataActualCountReg2(31 downto 0) <= ActualCountReg2_Count;
	end process;
	
	PreMatchReadActualCountReg3Process : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(ACTUALCOUNTREG3_ADDRESS)) then
			PreMatchReadActualCountReg3 <= ReadAddressMatch;
		else
			PreMatchReadActualCountReg3 <= '0';
		end if;
	end process;
	
	ReadDiffActualCountReg3Process : process (ReadAddress, Read, PreReadAckActualCountReg3)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(ACTUALCOUNTREG3_ADDRESS)) then
			ReadDiffActualCountReg3 <= Read and not PreReadAckActualCountReg3;
		else
			ReadDiffActualCountReg3 <= '0';
		end if;
	end process;
	
	SyncPartActualCountReg3 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckActualCountReg3 <= '0';
		elsif rising_edge(Clk) then
			PreReadAckActualCountReg3 <= ReadDiffActualCountReg3;
		end if;
	end process;
	
	DataOutPreMuxForActualCountReg3 : process (
		ActualCountReg3_Count
	) begin
		PreReadDataActualCountReg3 <= (others => '0');
		PreReadDataActualCountReg3(31 downto 0) <= ActualCountReg3_Count;
	end process;
	
	PreMatchReadFailureCountReg0Process : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(FAILURECOUNTREG0_ADDRESS)) then
			PreMatchReadFailureCountReg0 <= ReadAddressMatch;
		else
			PreMatchReadFailureCountReg0 <= '0';
		end if;
	end process;
	
	ReadDiffFailureCountReg0Process : process (ReadAddress, Read, PreReadAckFailureCountReg0)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(FAILURECOUNTREG0_ADDRESS)) then
			ReadDiffFailureCountReg0 <= Read and not PreReadAckFailureCountReg0;
		else
			ReadDiffFailureCountReg0 <= '0';
		end if;
	end process;
	
	SyncPartFailureCountReg0 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckFailureCountReg0 <= '0';
		elsif rising_edge(Clk) then
			PreReadAckFailureCountReg0 <= ReadDiffFailureCountReg0;
		end if;
	end process;
	
	DataOutPreMuxForFailureCountReg0 : process (
		FailureCountReg0_Count
	) begin
		PreReadDataFailureCountReg0 <= (others => '0');
		PreReadDataFailureCountReg0(31 downto 0) <= FailureCountReg0_Count;
	end process;
	
	PreMatchReadFailureCountReg1Process : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(FAILURECOUNTREG1_ADDRESS)) then
			PreMatchReadFailureCountReg1 <= ReadAddressMatch;
		else
			PreMatchReadFailureCountReg1 <= '0';
		end if;
	end process;
	
	ReadDiffFailureCountReg1Process : process (ReadAddress, Read, PreReadAckFailureCountReg1)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(FAILURECOUNTREG1_ADDRESS)) then
			ReadDiffFailureCountReg1 <= Read and not PreReadAckFailureCountReg1;
		else
			ReadDiffFailureCountReg1 <= '0';
		end if;
	end process;
	
	SyncPartFailureCountReg1 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckFailureCountReg1 <= '0';
		elsif rising_edge(Clk) then
			PreReadAckFailureCountReg1 <= ReadDiffFailureCountReg1;
		end if;
	end process;
	
	DataOutPreMuxForFailureCountReg1 : process (
		FailureCountReg1_Count
	) begin
		PreReadDataFailureCountReg1 <= (others => '0');
		PreReadDataFailureCountReg1(31 downto 0) <= FailureCountReg1_Count;
	end process;
	
	PreMatchReadFailureCountReg2Process : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(FAILURECOUNTREG2_ADDRESS)) then
			PreMatchReadFailureCountReg2 <= ReadAddressMatch;
		else
			PreMatchReadFailureCountReg2 <= '0';
		end if;
	end process;
	
	ReadDiffFailureCountReg2Process : process (ReadAddress, Read, PreReadAckFailureCountReg2)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(FAILURECOUNTREG2_ADDRESS)) then
			ReadDiffFailureCountReg2 <= Read and not PreReadAckFailureCountReg2;
		else
			ReadDiffFailureCountReg2 <= '0';
		end if;
	end process;
	
	SyncPartFailureCountReg2 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckFailureCountReg2 <= '0';
		elsif rising_edge(Clk) then
			PreReadAckFailureCountReg2 <= ReadDiffFailureCountReg2;
		end if;
	end process;
	
	DataOutPreMuxForFailureCountReg2 : process (
		FailureCountReg2_Count
	) begin
		PreReadDataFailureCountReg2 <= (others => '0');
		PreReadDataFailureCountReg2(31 downto 0) <= FailureCountReg2_Count;
	end process;
	
	PreMatchReadFailureCountReg3Process : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(FAILURECOUNTREG3_ADDRESS)) then
			PreMatchReadFailureCountReg3 <= ReadAddressMatch;
		else
			PreMatchReadFailureCountReg3 <= '0';
		end if;
	end process;
	
	ReadDiffFailureCountReg3Process : process (ReadAddress, Read, PreReadAckFailureCountReg3)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(FAILURECOUNTREG3_ADDRESS)) then
			ReadDiffFailureCountReg3 <= Read and not PreReadAckFailureCountReg3;
		else
			ReadDiffFailureCountReg3 <= '0';
		end if;
	end process;
	
	SyncPartFailureCountReg3 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckFailureCountReg3 <= '0';
		elsif rising_edge(Clk) then
			PreReadAckFailureCountReg3 <= ReadDiffFailureCountReg3;
		end if;
	end process;
	
	DataOutPreMuxForFailureCountReg3 : process (
		FailureCountReg3_Count
	) begin
		PreReadDataFailureCountReg3 <= (others => '0');
		PreReadDataFailureCountReg3(31 downto 0) <= FailureCountReg3_Count;
	end process;
	
	PreMatchReadIntervalReg0Process : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(INTERVALREG0_ADDRESS)) then
			PreMatchReadIntervalReg0 <= ReadAddressMatch;
		else
			PreMatchReadIntervalReg0 <= '0';
		end if;
	end process;
	
	PreMatchWriteIntervalReg0Process : process (WriteAddress, WriteAddrMatch)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(INTERVALREG0_ADDRESS)) then
			PreMatchWriteIntervalReg0 <= WriteAddrMatch;
		else
			PreMatchWriteIntervalReg0 <= '0';
		end if;
	end process;
	
	WriteDiffIntervalReg0Process : process (WriteAddress, Write, PreWriteAckIntervalReg0)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(INTERVALREG0_ADDRESS)) then
			WriteDiffIntervalReg0 <=  Write and not PreWriteAckIntervalReg0;
		else
			WriteDiffIntervalReg0 <= '0';
		end if;
	end process;
	
	ReadDiffIntervalReg0Process : process (ReadAddress, Read, PreReadAckIntervalReg0)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(INTERVALREG0_ADDRESS)) then
			ReadDiffIntervalReg0 <= Read and not PreReadAckIntervalReg0;
		else
			ReadDiffIntervalReg0 <= '0';
		end if;
	end process;
	
	SyncPartIntervalReg0 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckIntervalReg0 <= '0';
			PreWriteAckIntervalReg0 <= '0';
			WRegIntervalReg0_Interval <= (others => '0');
		elsif rising_edge(Clk) then
			PreWriteAckIntervalReg0 <= WriteDiffIntervalReg0;
			PreReadAckIntervalReg0 <= ReadDiffIntervalReg0;
			if (WriteDiffIntervalReg0 = '1') then
				if (WriteStrobe(3) = '1') then WRegIntervalReg0_Interval(31 downto 24) <= WriteData(31 downto 24); end if;
				if (WriteStrobe(2) = '1') then WRegIntervalReg0_Interval(23 downto 16) <= WriteData(23 downto 16); end if;
				if (WriteStrobe(1) = '1') then WRegIntervalReg0_Interval(15 downto 8) <= WriteData(15 downto 8); end if;
				if (WriteStrobe(0) = '1') then WRegIntervalReg0_Interval(7 downto 0) <= WriteData(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForIntervalReg0 : process (
		WRegIntervalReg0_Interval
	) begin
		PreReadDataIntervalReg0 <= (others => '0');
		PreReadDataIntervalReg0(31 downto 0) <= WRegIntervalReg0_Interval;
	end process;
	
	IntervalReg0_Interval <= WRegIntervalReg0_Interval;
	
	PreMatchReadIntervalReg1Process : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(INTERVALREG1_ADDRESS)) then
			PreMatchReadIntervalReg1 <= ReadAddressMatch;
		else
			PreMatchReadIntervalReg1 <= '0';
		end if;
	end process;
	
	PreMatchWriteIntervalReg1Process : process (WriteAddress, WriteAddrMatch)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(INTERVALREG1_ADDRESS)) then
			PreMatchWriteIntervalReg1 <= WriteAddrMatch;
		else
			PreMatchWriteIntervalReg1 <= '0';
		end if;
	end process;
	
	WriteDiffIntervalReg1Process : process (WriteAddress, Write, PreWriteAckIntervalReg1)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(INTERVALREG1_ADDRESS)) then
			WriteDiffIntervalReg1 <=  Write and not PreWriteAckIntervalReg1;
		else
			WriteDiffIntervalReg1 <= '0';
		end if;
	end process;
	
	ReadDiffIntervalReg1Process : process (ReadAddress, Read, PreReadAckIntervalReg1)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(INTERVALREG1_ADDRESS)) then
			ReadDiffIntervalReg1 <= Read and not PreReadAckIntervalReg1;
		else
			ReadDiffIntervalReg1 <= '0';
		end if;
	end process;
	
	SyncPartIntervalReg1 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckIntervalReg1 <= '0';
			PreWriteAckIntervalReg1 <= '0';
			WRegIntervalReg1_Interval <= (others => '0');
		elsif rising_edge(Clk) then
			PreWriteAckIntervalReg1 <= WriteDiffIntervalReg1;
			PreReadAckIntervalReg1 <= ReadDiffIntervalReg1;
			if (WriteDiffIntervalReg1 = '1') then
				if (WriteStrobe(3) = '1') then WRegIntervalReg1_Interval(31 downto 24) <= WriteData(31 downto 24); end if;
				if (WriteStrobe(2) = '1') then WRegIntervalReg1_Interval(23 downto 16) <= WriteData(23 downto 16); end if;
				if (WriteStrobe(1) = '1') then WRegIntervalReg1_Interval(15 downto 8) <= WriteData(15 downto 8); end if;
				if (WriteStrobe(0) = '1') then WRegIntervalReg1_Interval(7 downto 0) <= WriteData(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForIntervalReg1 : process (
		WRegIntervalReg1_Interval
	) begin
		PreReadDataIntervalReg1 <= (others => '0');
		PreReadDataIntervalReg1(31 downto 0) <= WRegIntervalReg1_Interval;
	end process;
	
	IntervalReg1_Interval <= WRegIntervalReg1_Interval;
	
	PreMatchReadIntervalReg2Process : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(INTERVALREG2_ADDRESS)) then
			PreMatchReadIntervalReg2 <= ReadAddressMatch;
		else
			PreMatchReadIntervalReg2 <= '0';
		end if;
	end process;
	
	PreMatchWriteIntervalReg2Process : process (WriteAddress, WriteAddrMatch)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(INTERVALREG2_ADDRESS)) then
			PreMatchWriteIntervalReg2 <= WriteAddrMatch;
		else
			PreMatchWriteIntervalReg2 <= '0';
		end if;
	end process;
	
	WriteDiffIntervalReg2Process : process (WriteAddress, Write, PreWriteAckIntervalReg2)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(INTERVALREG2_ADDRESS)) then
			WriteDiffIntervalReg2 <=  Write and not PreWriteAckIntervalReg2;
		else
			WriteDiffIntervalReg2 <= '0';
		end if;
	end process;
	
	ReadDiffIntervalReg2Process : process (ReadAddress, Read, PreReadAckIntervalReg2)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(INTERVALREG2_ADDRESS)) then
			ReadDiffIntervalReg2 <= Read and not PreReadAckIntervalReg2;
		else
			ReadDiffIntervalReg2 <= '0';
		end if;
	end process;
	
	SyncPartIntervalReg2 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckIntervalReg2 <= '0';
			PreWriteAckIntervalReg2 <= '0';
			WRegIntervalReg2_Interval <= (others => '0');
		elsif rising_edge(Clk) then
			PreWriteAckIntervalReg2 <= WriteDiffIntervalReg2;
			PreReadAckIntervalReg2 <= ReadDiffIntervalReg2;
			if (WriteDiffIntervalReg2 = '1') then
				if (WriteStrobe(3) = '1') then WRegIntervalReg2_Interval(31 downto 24) <= WriteData(31 downto 24); end if;
				if (WriteStrobe(2) = '1') then WRegIntervalReg2_Interval(23 downto 16) <= WriteData(23 downto 16); end if;
				if (WriteStrobe(1) = '1') then WRegIntervalReg2_Interval(15 downto 8) <= WriteData(15 downto 8); end if;
				if (WriteStrobe(0) = '1') then WRegIntervalReg2_Interval(7 downto 0) <= WriteData(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForIntervalReg2 : process (
		WRegIntervalReg2_Interval
	) begin
		PreReadDataIntervalReg2 <= (others => '0');
		PreReadDataIntervalReg2(31 downto 0) <= WRegIntervalReg2_Interval;
	end process;
	
	IntervalReg2_Interval <= WRegIntervalReg2_Interval;
	
	PreMatchReadIntervalReg3Process : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(INTERVALREG3_ADDRESS)) then
			PreMatchReadIntervalReg3 <= ReadAddressMatch;
		else
			PreMatchReadIntervalReg3 <= '0';
		end if;
	end process;
	
	PreMatchWriteIntervalReg3Process : process (WriteAddress, WriteAddrMatch)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(INTERVALREG3_ADDRESS)) then
			PreMatchWriteIntervalReg3 <= WriteAddrMatch;
		else
			PreMatchWriteIntervalReg3 <= '0';
		end if;
	end process;
	
	WriteDiffIntervalReg3Process : process (WriteAddress, Write, PreWriteAckIntervalReg3)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(INTERVALREG3_ADDRESS)) then
			WriteDiffIntervalReg3 <=  Write and not PreWriteAckIntervalReg3;
		else
			WriteDiffIntervalReg3 <= '0';
		end if;
	end process;
	
	ReadDiffIntervalReg3Process : process (ReadAddress, Read, PreReadAckIntervalReg3)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(INTERVALREG3_ADDRESS)) then
			ReadDiffIntervalReg3 <= Read and not PreReadAckIntervalReg3;
		else
			ReadDiffIntervalReg3 <= '0';
		end if;
	end process;
	
	SyncPartIntervalReg3 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckIntervalReg3 <= '0';
			PreWriteAckIntervalReg3 <= '0';
			WRegIntervalReg3_Interval <= (others => '0');
		elsif rising_edge(Clk) then
			PreWriteAckIntervalReg3 <= WriteDiffIntervalReg3;
			PreReadAckIntervalReg3 <= ReadDiffIntervalReg3;
			if (WriteDiffIntervalReg3 = '1') then
				if (WriteStrobe(3) = '1') then WRegIntervalReg3_Interval(31 downto 24) <= WriteData(31 downto 24); end if;
				if (WriteStrobe(2) = '1') then WRegIntervalReg3_Interval(23 downto 16) <= WriteData(23 downto 16); end if;
				if (WriteStrobe(1) = '1') then WRegIntervalReg3_Interval(15 downto 8) <= WriteData(15 downto 8); end if;
				if (WriteStrobe(0) = '1') then WRegIntervalReg3_Interval(7 downto 0) <= WriteData(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForIntervalReg3 : process (
		WRegIntervalReg3_Interval
	) begin
		PreReadDataIntervalReg3 <= (others => '0');
		PreReadDataIntervalReg3(31 downto 0) <= WRegIntervalReg3_Interval;
	end process;
	
	IntervalReg3_Interval <= WRegIntervalReg3_Interval;
	
	PreMatchReadReferenceCountReg0Process : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(REFERENCECOUNTREG0_ADDRESS)) then
			PreMatchReadReferenceCountReg0 <= ReadAddressMatch;
		else
			PreMatchReadReferenceCountReg0 <= '0';
		end if;
	end process;
	
	PreMatchWriteReferenceCountReg0Process : process (WriteAddress, WriteAddrMatch)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(REFERENCECOUNTREG0_ADDRESS)) then
			PreMatchWriteReferenceCountReg0 <= WriteAddrMatch;
		else
			PreMatchWriteReferenceCountReg0 <= '0';
		end if;
	end process;
	
	WriteDiffReferenceCountReg0Process : process (WriteAddress, Write, PreWriteAckReferenceCountReg0)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(REFERENCECOUNTREG0_ADDRESS)) then
			WriteDiffReferenceCountReg0 <=  Write and not PreWriteAckReferenceCountReg0;
		else
			WriteDiffReferenceCountReg0 <= '0';
		end if;
	end process;
	
	ReadDiffReferenceCountReg0Process : process (ReadAddress, Read, PreReadAckReferenceCountReg0)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(REFERENCECOUNTREG0_ADDRESS)) then
			ReadDiffReferenceCountReg0 <= Read and not PreReadAckReferenceCountReg0;
		else
			ReadDiffReferenceCountReg0 <= '0';
		end if;
	end process;
	
	SyncPartReferenceCountReg0 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckReferenceCountReg0 <= '0';
			PreWriteAckReferenceCountReg0 <= '0';
			WRegReferenceCountReg0_Count <= (others => '0');
		elsif rising_edge(Clk) then
			PreWriteAckReferenceCountReg0 <= WriteDiffReferenceCountReg0;
			PreReadAckReferenceCountReg0 <= ReadDiffReferenceCountReg0;
			if (WriteDiffReferenceCountReg0 = '1') then
				if (WriteStrobe(3) = '1') then WRegReferenceCountReg0_Count(31 downto 24) <= WriteData(31 downto 24); end if;
				if (WriteStrobe(2) = '1') then WRegReferenceCountReg0_Count(23 downto 16) <= WriteData(23 downto 16); end if;
				if (WriteStrobe(1) = '1') then WRegReferenceCountReg0_Count(15 downto 8) <= WriteData(15 downto 8); end if;
				if (WriteStrobe(0) = '1') then WRegReferenceCountReg0_Count(7 downto 0) <= WriteData(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForReferenceCountReg0 : process (
		WRegReferenceCountReg0_Count
	) begin
		PreReadDataReferenceCountReg0 <= (others => '0');
		PreReadDataReferenceCountReg0(31 downto 0) <= WRegReferenceCountReg0_Count;
	end process;
	
	ReferenceCountReg0_Count <= WRegReferenceCountReg0_Count;
	
	PreMatchReadReferenceCountReg1Process : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(REFERENCECOUNTREG1_ADDRESS)) then
			PreMatchReadReferenceCountReg1 <= ReadAddressMatch;
		else
			PreMatchReadReferenceCountReg1 <= '0';
		end if;
	end process;
	
	PreMatchWriteReferenceCountReg1Process : process (WriteAddress, WriteAddrMatch)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(REFERENCECOUNTREG1_ADDRESS)) then
			PreMatchWriteReferenceCountReg1 <= WriteAddrMatch;
		else
			PreMatchWriteReferenceCountReg1 <= '0';
		end if;
	end process;
	
	WriteDiffReferenceCountReg1Process : process (WriteAddress, Write, PreWriteAckReferenceCountReg1)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(REFERENCECOUNTREG1_ADDRESS)) then
			WriteDiffReferenceCountReg1 <=  Write and not PreWriteAckReferenceCountReg1;
		else
			WriteDiffReferenceCountReg1 <= '0';
		end if;
	end process;
	
	ReadDiffReferenceCountReg1Process : process (ReadAddress, Read, PreReadAckReferenceCountReg1)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(REFERENCECOUNTREG1_ADDRESS)) then
			ReadDiffReferenceCountReg1 <= Read and not PreReadAckReferenceCountReg1;
		else
			ReadDiffReferenceCountReg1 <= '0';
		end if;
	end process;
	
	SyncPartReferenceCountReg1 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckReferenceCountReg1 <= '0';
			PreWriteAckReferenceCountReg1 <= '0';
			WRegReferenceCountReg1_Count <= (others => '0');
		elsif rising_edge(Clk) then
			PreWriteAckReferenceCountReg1 <= WriteDiffReferenceCountReg1;
			PreReadAckReferenceCountReg1 <= ReadDiffReferenceCountReg1;
			if (WriteDiffReferenceCountReg1 = '1') then
				if (WriteStrobe(3) = '1') then WRegReferenceCountReg1_Count(31 downto 24) <= WriteData(31 downto 24); end if;
				if (WriteStrobe(2) = '1') then WRegReferenceCountReg1_Count(23 downto 16) <= WriteData(23 downto 16); end if;
				if (WriteStrobe(1) = '1') then WRegReferenceCountReg1_Count(15 downto 8) <= WriteData(15 downto 8); end if;
				if (WriteStrobe(0) = '1') then WRegReferenceCountReg1_Count(7 downto 0) <= WriteData(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForReferenceCountReg1 : process (
		WRegReferenceCountReg1_Count
	) begin
		PreReadDataReferenceCountReg1 <= (others => '0');
		PreReadDataReferenceCountReg1(31 downto 0) <= WRegReferenceCountReg1_Count;
	end process;
	
	ReferenceCountReg1_Count <= WRegReferenceCountReg1_Count;
	
	PreMatchReadReferenceCountReg2Process : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(REFERENCECOUNTREG2_ADDRESS)) then
			PreMatchReadReferenceCountReg2 <= ReadAddressMatch;
		else
			PreMatchReadReferenceCountReg2 <= '0';
		end if;
	end process;
	
	PreMatchWriteReferenceCountReg2Process : process (WriteAddress, WriteAddrMatch)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(REFERENCECOUNTREG2_ADDRESS)) then
			PreMatchWriteReferenceCountReg2 <= WriteAddrMatch;
		else
			PreMatchWriteReferenceCountReg2 <= '0';
		end if;
	end process;
	
	WriteDiffReferenceCountReg2Process : process (WriteAddress, Write, PreWriteAckReferenceCountReg2)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(REFERENCECOUNTREG2_ADDRESS)) then
			WriteDiffReferenceCountReg2 <=  Write and not PreWriteAckReferenceCountReg2;
		else
			WriteDiffReferenceCountReg2 <= '0';
		end if;
	end process;
	
	ReadDiffReferenceCountReg2Process : process (ReadAddress, Read, PreReadAckReferenceCountReg2)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(REFERENCECOUNTREG2_ADDRESS)) then
			ReadDiffReferenceCountReg2 <= Read and not PreReadAckReferenceCountReg2;
		else
			ReadDiffReferenceCountReg2 <= '0';
		end if;
	end process;
	
	SyncPartReferenceCountReg2 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckReferenceCountReg2 <= '0';
			PreWriteAckReferenceCountReg2 <= '0';
			WRegReferenceCountReg2_Count <= (others => '0');
		elsif rising_edge(Clk) then
			PreWriteAckReferenceCountReg2 <= WriteDiffReferenceCountReg2;
			PreReadAckReferenceCountReg2 <= ReadDiffReferenceCountReg2;
			if (WriteDiffReferenceCountReg2 = '1') then
				if (WriteStrobe(3) = '1') then WRegReferenceCountReg2_Count(31 downto 24) <= WriteData(31 downto 24); end if;
				if (WriteStrobe(2) = '1') then WRegReferenceCountReg2_Count(23 downto 16) <= WriteData(23 downto 16); end if;
				if (WriteStrobe(1) = '1') then WRegReferenceCountReg2_Count(15 downto 8) <= WriteData(15 downto 8); end if;
				if (WriteStrobe(0) = '1') then WRegReferenceCountReg2_Count(7 downto 0) <= WriteData(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForReferenceCountReg2 : process (
		WRegReferenceCountReg2_Count
	) begin
		PreReadDataReferenceCountReg2 <= (others => '0');
		PreReadDataReferenceCountReg2(31 downto 0) <= WRegReferenceCountReg2_Count;
	end process;
	
	ReferenceCountReg2_Count <= WRegReferenceCountReg2_Count;
	
	PreMatchReadReferenceCountReg3Process : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(REFERENCECOUNTREG3_ADDRESS)) then
			PreMatchReadReferenceCountReg3 <= ReadAddressMatch;
		else
			PreMatchReadReferenceCountReg3 <= '0';
		end if;
	end process;
	
	PreMatchWriteReferenceCountReg3Process : process (WriteAddress, WriteAddrMatch)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(REFERENCECOUNTREG3_ADDRESS)) then
			PreMatchWriteReferenceCountReg3 <= WriteAddrMatch;
		else
			PreMatchWriteReferenceCountReg3 <= '0';
		end if;
	end process;
	
	WriteDiffReferenceCountReg3Process : process (WriteAddress, Write, PreWriteAckReferenceCountReg3)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(REFERENCECOUNTREG3_ADDRESS)) then
			WriteDiffReferenceCountReg3 <=  Write and not PreWriteAckReferenceCountReg3;
		else
			WriteDiffReferenceCountReg3 <= '0';
		end if;
	end process;
	
	ReadDiffReferenceCountReg3Process : process (ReadAddress, Read, PreReadAckReferenceCountReg3)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(REFERENCECOUNTREG3_ADDRESS)) then
			ReadDiffReferenceCountReg3 <= Read and not PreReadAckReferenceCountReg3;
		else
			ReadDiffReferenceCountReg3 <= '0';
		end if;
	end process;
	
	SyncPartReferenceCountReg3 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckReferenceCountReg3 <= '0';
			PreWriteAckReferenceCountReg3 <= '0';
			WRegReferenceCountReg3_Count <= (others => '0');
		elsif rising_edge(Clk) then
			PreWriteAckReferenceCountReg3 <= WriteDiffReferenceCountReg3;
			PreReadAckReferenceCountReg3 <= ReadDiffReferenceCountReg3;
			if (WriteDiffReferenceCountReg3 = '1') then
				if (WriteStrobe(3) = '1') then WRegReferenceCountReg3_Count(31 downto 24) <= WriteData(31 downto 24); end if;
				if (WriteStrobe(2) = '1') then WRegReferenceCountReg3_Count(23 downto 16) <= WriteData(23 downto 16); end if;
				if (WriteStrobe(1) = '1') then WRegReferenceCountReg3_Count(15 downto 8) <= WriteData(15 downto 8); end if;
				if (WriteStrobe(0) = '1') then WRegReferenceCountReg3_Count(7 downto 0) <= WriteData(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForReferenceCountReg3 : process (
		WRegReferenceCountReg3_Count
	) begin
		PreReadDataReferenceCountReg3 <= (others => '0');
		PreReadDataReferenceCountReg3(31 downto 0) <= WRegReferenceCountReg3_Count;
	end process;
	
	ReferenceCountReg3_Count <= WRegReferenceCountReg3_Count;
	
end;

library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;

entity InterruptGeneratorIfcAxi4LiteBusController is
	port(
		Clk : in std_logic;
		Rst : in std_logic;
		AWVALID : in std_logic;
		AWADDR : in std_logic_vector(15 downto 0);
		AWPROT : in std_logic_vector(2 downto 0);
		AWREADY : out std_logic;
		WVALID : in std_logic;
		WDATA : in std_logic_vector(31 downto 0);
		WSTRB : in std_logic_vector(3 downto 0);
		WREADY : out std_logic;
		BREADY : in std_logic;
		BVALID : out std_logic;
		BRESP : out std_logic_vector(1 downto 0);
		ARVALID : in std_logic;
		ARADDR : in std_logic_vector(15 downto 0);
		ARPROT : in std_logic_vector(2 downto 0);
		ARREADY : out std_logic;
		RREADY : in std_logic;
		RVALID : out std_logic;
		RDATA : out std_logic_vector(31 downto 0);
		RRESP : out std_logic_vector(1 downto 0);
		WritePrivileged : out std_logic;
		WriteSecure : out std_logic;
		WriteInstruction : out std_logic;
		ReadPrivileged : out std_logic;
		ReadSecure : out std_logic;
		ReadInstruction : out std_logic;
		ReadMatch : in std_logic;
		ReadAck : in std_logic;
		ReadData : in std_logic_vector(31 downto 0);
		ReadResp : in std_logic_vector(1 downto 0);
		Read : out std_logic;
		ReadAddressMatch : out std_logic;
		ReadAddressProt : out std_logic_vector(2 downto 0);
		ReadAddress : out std_logic_vector(15 downto 0);
		WriteMatch : in std_logic;
		WriteAck : in std_logic;
		WriteResp : in std_logic_vector(1 downto 0);
		Write : out std_logic;
		WriteAddrMatch : out std_logic;
		WriteAddressProt : out std_logic_vector(2 downto 0);
		WriteAddress : out std_logic_vector(15 downto 0);
		WriteData : out std_logic_vector(31 downto 0);
		WriteStrobe : out std_logic_vector(3 downto 0);
		UnoccupiedAck : out std_logic;
		TimeoutAck : out std_logic
	);
end;

architecture Behavioural of InterruptGeneratorIfcAxi4LiteBusController is

	type T_Axi4LiteWriteState is (
		Axi4LiteWriteStateIdle,
		Axi4LiteWriteStateAddress,
		Axi4LiteWriteStateData,
		Axi4LiteWriteStateResp,
		Axi4LiteWriteStateErrorResp,
		Axi4LiteWriteStateDone
	);

	type T_Axi4LiteReadState is (
		Axi4LiteReadStateIdle,
		Axi4LiteReadStateAddress,
		Axi4LiteReadStateData,
		Axi4LiteReadStateDone
	);

	signal Axi4LiteReadState : T_Axi4LiteReadState;
	signal Axi4LiteWriteState : T_Axi4LiteWriteState;

	signal ReadTimeoutCounter : unsigned(9 downto 0);
	signal WriteTimeoutCounter : unsigned(9 downto 0);

	signal ReadUnoccupiedAck : std_logic;
	signal WriteUnoccupiedAck : std_logic;
	signal ReadTimeoutAck : std_logic;
	signal WriteTimeoutAck : std_logic;
	
	signal ReadProtect : std_logic_vector(2 downto 0);
	signal WriteProtect : std_logic_vector(2 downto 0);

begin

	UnoccupiedAck <= ReadUnoccupiedAck or WriteUnoccupiedAck;
	TimeoutAck <= ReadTimeoutAck or WriteTimeoutAck;

	WritePrivileged <= WriteProtect(0);
	WriteSecure <= WriteProtect(1);
	WriteInstruction <= WriteProtect(2);
	ReadPrivileged <= ReadProtect(0);
	ReadSecure <= ReadProtect(1);
	ReadInstruction <= ReadProtect(2);
	
	WriteAddressProt <= WriteProtect;
	ReadAddressProt <= ReadProtect;

	Axi4LiteRead : process(Clk, Rst) is
	begin
		if Rst = '1' then
			ARREADY <= '0';
			RVALID <= '0';
			RDATA <= (others => '0');
			RRESP <= (others => '0');
			Read <= '0';
			ReadAddressMatch <= '0';
			ReadAddress <= (others => '0');
			ReadProtect <= (others => '0');
			ReadUnoccupiedAck <= '0';
			ReadTimeoutAck <= '0';
			ReadTimeoutCounter <= (others => '1');
			Axi4LiteReadState <= Axi4LiteReadStateIdle;
		elsif rising_edge(Clk) then
			ARREADY <= '0';
			RVALID <= '0';
			case Axi4LiteReadState is
				when Axi4LiteReadStateIdle =>
					ReadUnoccupiedAck <= '0';
					ReadTimeoutAck <= '0';
					ReadTimeoutCounter <= (others => '1');
					Read <= '0';
					ReadAddressMatch <= '0';
					ReadAddress <= (others => '0');
					ReadProtect <= (others => '0');
					if ARVALID = '1' then
						ReadAddress <= ARADDR;
						ReadProtect <= ARPROT;
						ReadAddressMatch <= '1';
						Axi4LiteReadState <= Axi4LiteReadStateAddress;
					end if;
				when Axi4LiteReadStateAddress =>
					ARREADY <= '1';
					Axi4LiteReadState <= Axi4LiteReadStateData;
					if ReadMatch = '1' then
						Read <= '1';
					else
						ReadUnoccupiedAck <= '1';
					end if;
				when Axi4LiteReadStateData =>
					ReadTimeoutCounter <= ReadTimeoutCounter - 1;
					RDATA <= ReadData;
					RRESP <= ReadResp;
					if ReadAck = '1' then
						ReadAddressMatch <= '0';
						RVALID <= '1';
						Axi4LiteReadState <= Axi4LiteReadStateDone;
					end if;
					if ReadUnoccupiedAck = '1' then
						RRESP <= "11";
						RVALID <= '1';
						ReadAddressMatch <= '0';
						Axi4LiteReadState <= Axi4LiteReadStateDone;
					end if;
					if ReadTimeoutCounter = 0 then
						ReadTimeoutAck <= '1';
						RRESP <= "10";
						RVALID <= '1';
						ReadAddressMatch <= '0';
						Axi4LiteReadState <= Axi4LiteReadStateDone;
					end if;
				when Axi4LiteReadStateDone =>
					RVALID <= '1';
					if RREADY = '1' then
						RVALID <= '0';
						ReadAddress <= (others => '0');
						ReadProtect <= (others => '0');
						RRESP <= (others => '0');
						Read <= '0';
						Axi4LiteReadState <= Axi4LiteReadStateIdle;
					end if;
			end case;
		end if;
	end process;

	Axi4LiteWrite : process(Clk, Rst) is
	begin
		if Rst = '1' then
			AWREADY <= '0';
			WREADY <= '0';
			BVALID <= '0';
			BRESP <= (others => '0');
			Write <= '0';
			WriteAddrMatch <= '0';
			WriteAddress <= (others => '0');
			WriteProtect <= (others => '0');
			WriteData <= (others => '0');
			WriteStrobe <= (others => '0');
			WriteUnoccupiedAck <= '0';
			WriteTimeoutAck <= '0';
			WriteTimeoutCounter <= (others => '1');
			Axi4LiteWriteState <= Axi4LiteWriteStateIdle;
		elsif rising_edge(Clk) then
			AWREADY <= '0';
			WREADY <= '0';
			BVALID <= '0';
			case Axi4LiteWriteState is
				when Axi4LiteWriteStateIdle =>
					WriteUnoccupiedAck <= '0';
					WriteTimeoutAck <= '0';
					WriteTimeoutCounter <= (others => '1');
					Write <= '0';
					WriteAddrMatch <= '0';
					WriteAddress <= (others => '0');
					WriteProtect <= (others => '0');
					if AWVALID = '1' then
						WriteAddress <= AWADDR;
						WriteProtect <= AWPROT;
						WriteAddrMatch <= '1';
						Axi4LiteWriteState <= Axi4LiteWriteStateAddress;
					end if;
				when Axi4LiteWriteStateAddress =>
					AWREADY <= '1';
					WREADY <= '1';
					Axi4LiteWriteState <= Axi4LiteWriteStateData;
					if WriteMatch = '0' then
						WriteUnoccupiedAck <= '1';
					end if;
				when Axi4LiteWriteStateData =>
					WREADY <= '1';
					WriteData <= WDATA;
					WriteStrobe <= WSTRB;
					if WVALID = '1' then
						WREADY <= '0';
						if WriteUnoccupiedAck = '0' then
							Write <= '1';
							Axi4LiteWriteState <= Axi4LiteWriteStateResp;
						else
							Axi4LiteWriteState <= Axi4LiteWriteStateErrorResp;
						end if;
					end if;
				when Axi4LiteWriteStateResp =>
					WriteTimeoutCounter <= WriteTimeoutCounter - 1;
					Write <= '1';
					BRESP <= WriteResp;
					if WriteAck = '1' then
						Write <= '0';
						WriteAddrMatch <= '0';
						BVALID <= '1';
						Axi4LiteWriteState <= Axi4LiteWriteStateDone;
					end if;
					if WriteTimeoutCounter = 0 then
						WriteTimeoutAck <= '1';
						Write <= '0';
						WriteAddrMatch <= '0';
						Axi4LiteWriteState <= Axi4LiteWriteStateErrorResp;
					end if;
				when Axi4LiteWriteStateErrorResp =>
					Write <= '0';
					WriteAddrMatch <= '0';
					BVALID <= '1';
					Axi4LiteWriteState <= Axi4LiteWriteStateDone;
					if WriteUnoccupiedAck = '1' then
						BRESP <= "11";
					else
						BRESP <= "10";
					end if;
				when Axi4LiteWriteStateDone =>
					BVALID <= '1';
					if BREADY = '1' then
						WriteAddress <= (others => '0');
						WriteProtect <= (others => '0');
						BVALID <= '0';
						BRESP <= (others => '0');
						Axi4LiteWriteState <= Axi4LiteWriteStateIdle;
					end if;
			end case;
		end if;
	end process;

end;

library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;

use work.InterruptGeneratorIfcPackage.all;

entity InterruptGeneratorIfcAxi4Lite is
	port (
		Clk : in std_logic;
		Rst : in std_logic;
		Axi4LiteDown : in T_InterruptGeneratorIfcAxi4LiteDown;
		Axi4LiteUp : out T_InterruptGeneratorIfcAxi4LiteUp;
		Axi4LiteAccess : out T_InterruptGeneratorIfcAxi4LiteAccess;
		Trace : out T_InterruptGeneratorIfcTrace;
		InterruptGeneratorBlkDown : out T_InterruptGeneratorIfcInterruptGeneratorBlkDown;
		InterruptGeneratorBlkUp : in T_InterruptGeneratorIfcInterruptGeneratorBlkUp
	);
end;

architecture Behavioural of InterruptGeneratorIfcAxi4Lite is

	signal PreAxi4LiteUp : T_InterruptGeneratorIfcAxi4LiteUp;
	signal PreAxi4LiteAccess : T_InterruptGeneratorIfcAxi4LiteAccess;
	
	signal UnoccupiedAck : std_logic;
	signal TimeoutAck : std_logic;
	
	signal ReadMatch : std_logic;
	signal ReadAck : std_logic;
	signal ReadData : std_logic_vector(31 downto 0);
	signal ReadResp : std_logic_vector(1 downto 0);
	signal Read : std_logic;
	signal ReadAddressMatch : std_logic;
	signal ReadAddressProt : std_logic_vector(2 downto 0);
	signal ReadAddress : std_logic_vector(15 downto 0);
	signal WriteMatch : std_logic;
	signal WriteAck : std_logic;
	signal WriteResp : std_logic_vector(1 downto 0);
	signal Write : std_logic;
	signal WriteAddrMatch : std_logic;
	signal WriteAddressProt : std_logic_vector(2 downto 0);
	signal WriteAddress : std_logic_vector(15 downto 0);
	signal WriteData : std_logic_vector(31 downto 0);
	signal WriteStrobe : std_logic_vector(3 downto 0);
	
	signal InterruptGeneratorBlkReadMatch : std_logic;
	signal InterruptGeneratorBlkReadAck : std_logic;
	signal InterruptGeneratorBlkReadData : std_logic_vector(31 downto 0);
	signal InterruptGeneratorBlkReadResp : std_logic_vector(1 downto 0);
	signal InterruptGeneratorBlkWriteMatch : std_logic;
	signal InterruptGeneratorBlkWriteAck : std_logic;
	signal InterruptGeneratorBlkWriteResp : std_logic_vector(1 downto 0);

begin

	i_InterruptGeneratorIfcAxi4LiteBusController : entity work.InterruptGeneratorIfcAxi4LiteBusController
		port map (
			Clk => Clk,
			Rst => Rst,
			AWVALID => Axi4LiteDown.AWVALID,
			AWADDR => Axi4LiteDown.AWADDR,
			AWPROT => Axi4LiteDown.AWPROT,
			AWREADY => PreAxi4LiteUp.AWREADY,
			WVALID => Axi4LiteDown.WVALID,
			WDATA => Axi4LiteDown.WDATA,
			WSTRB => Axi4LiteDown.WSTRB,
			WREADY => PreAxi4LiteUp.WREADY,
			BREADY => Axi4LiteDown.BREADY,
			BVALID => PreAxi4LiteUp.BVALID,
			BRESP => PreAxi4LiteUp.BRESP,
			ARVALID => Axi4LiteDown.ARVALID,
			ARADDR => Axi4LiteDown.ARADDR,
			ARPROT => Axi4LiteDown.ARPROT,
			ARREADY => PreAxi4LiteUp.ARREADY,
			RREADY => Axi4LiteDown.RREADY,
			RVALID => PreAxi4LiteUp.RVALID,
			RDATA => PreAxi4LiteUp.RDATA,
			RRESP => PreAxi4LiteUp.RRESP,
			WritePrivileged => PreAxi4LiteAccess.WritePrivileged,
			WriteSecure => PreAxi4LiteAccess.WriteSecure,
			WriteInstruction => PreAxi4LiteAccess.WriteInstruction,
			ReadPrivileged => PreAxi4LiteAccess.ReadPrivileged,
			ReadSecure => PreAxi4LiteAccess.ReadSecure,
			ReadInstruction => PreAxi4LiteAccess.ReadInstruction,
			ReadMatch => ReadMatch,
			ReadAck => ReadAck,
			ReadData => ReadData,
			ReadResp => ReadResp,
			Read => Read,
			ReadAddressMatch => ReadAddressMatch,
			ReadAddressProt => ReadAddressProt,
			ReadAddress => ReadAddress,
			WriteMatch => WriteMatch,
			WriteAck => WriteAck,
			WriteResp => WriteResp,
			Write => Write,
			WriteAddrMatch => WriteAddrMatch,
			WriteAddressProt => WriteAddressProt,
			WriteAddress => WriteAddress,
			WriteData => WriteData,
			WriteStrobe => WriteStrobe,
			UnoccupiedAck => UnoccupiedAck,
			TimeoutAck => TimeoutAck
		);
	
	i_InterruptGeneratorBlk_InterruptGeneratorIfc : entity work.InterruptGeneratorBlk_InterruptGeneratorIfc
		port map (
			Clk => Clk,
			Rst => Rst,
			ReadMatch => InterruptGeneratorBlkReadMatch,
			ReadAck => InterruptGeneratorBlkReadAck,
			ReadData => InterruptGeneratorBlkReadData,
			ReadResp => InterruptGeneratorBlkReadResp,
			Read => Read,
			ReadAddressMatch => ReadAddressMatch,
			ReadAddressProt => ReadAddressProt,
			ReadAddress => ReadAddress,
			WriteMatch => InterruptGeneratorBlkWriteMatch,
			WriteAck => InterruptGeneratorBlkWriteAck,
			WriteResp => InterruptGeneratorBlkWriteResp,
			Write => Write,
			WriteAddrMatch => WriteAddrMatch,
			WriteAddressProt => WriteAddressProt,
			WriteAddress => WriteAddress,
			WriteData => WriteData,
			WriteStrobe => WriteStrobe,
			ControlReg_ChannelOperation0 => InterruptGeneratorBlkDown.ControlReg_ChannelOperation0,
			ControlReg_ChannelOperation1 => InterruptGeneratorBlkDown.ControlReg_ChannelOperation1,
			ControlReg_ChannelOperation2 => InterruptGeneratorBlkDown.ControlReg_ChannelOperation2,
			ControlReg_ChannelOperation3 => InterruptGeneratorBlkDown.ControlReg_ChannelOperation3,
			StatusReg_ChannelStatus0 => InterruptGeneratorBlkUp.StatusReg_ChannelStatus0,
			StatusReg_ChannelStatus1 => InterruptGeneratorBlkUp.StatusReg_ChannelStatus1,
			StatusReg_ChannelStatus2 => InterruptGeneratorBlkUp.StatusReg_ChannelStatus2,
			StatusReg_ChannelStatus3 => InterruptGeneratorBlkUp.StatusReg_ChannelStatus3,
			ChargedCountReg0_Count => InterruptGeneratorBlkDown.ChargedCountReg0_Count,
			ChargedCountReg1_Count => InterruptGeneratorBlkDown.ChargedCountReg1_Count,
			ChargedCountReg2_Count => InterruptGeneratorBlkDown.ChargedCountReg2_Count,
			ChargedCountReg3_Count => InterruptGeneratorBlkDown.ChargedCountReg3_Count,
			ActualCountReg0_Count => InterruptGeneratorBlkUp.ActualCountReg0_Count,
			ActualCountReg1_Count => InterruptGeneratorBlkUp.ActualCountReg1_Count,
			ActualCountReg2_Count => InterruptGeneratorBlkUp.ActualCountReg2_Count,
			ActualCountReg3_Count => InterruptGeneratorBlkUp.ActualCountReg3_Count,
			FailureCountReg0_Count => InterruptGeneratorBlkUp.FailureCountReg0_Count,
			FailureCountReg1_Count => InterruptGeneratorBlkUp.FailureCountReg1_Count,
			FailureCountReg2_Count => InterruptGeneratorBlkUp.FailureCountReg2_Count,
			FailureCountReg3_Count => InterruptGeneratorBlkUp.FailureCountReg3_Count,
			IntervalReg0_Interval => InterruptGeneratorBlkDown.IntervalReg0_Interval,
			IntervalReg1_Interval => InterruptGeneratorBlkDown.IntervalReg1_Interval,
			IntervalReg2_Interval => InterruptGeneratorBlkDown.IntervalReg2_Interval,
			IntervalReg3_Interval => InterruptGeneratorBlkDown.IntervalReg3_Interval,
			ReferenceCountReg0_Count => InterruptGeneratorBlkDown.ReferenceCountReg0_Count,
			ReferenceCountReg1_Count => InterruptGeneratorBlkDown.ReferenceCountReg1_Count,
			ReferenceCountReg2_Count => InterruptGeneratorBlkDown.ReferenceCountReg2_Count,
			ReferenceCountReg3_Count => InterruptGeneratorBlkDown.ReferenceCountReg3_Count
		);
	
	Axi4LiteUp <= PreAxi4LiteUp;
	Axi4LiteAccess <= PreAxi4LiteAccess;
	
	Trace.Axi4LiteDown <= Axi4LiteDown;
	Trace.Axi4LiteUp <= PreAxi4LiteUp;
	Trace.Axi4LiteAccess <= PreAxi4LiteAccess;
	Trace.UnoccupiedAck <= UnoccupiedAck;
	Trace.TimeoutAck <= TimeoutAck;
	
	ReadMatch <= InterruptGeneratorBlkReadMatch;
	ReadAck <= InterruptGeneratorBlkReadAck;
	ReadResp <= InterruptGeneratorBlkReadResp;
	ReadData <= InterruptGeneratorBlkReadData;
	WriteMatch <= InterruptGeneratorBlkWriteMatch;
	WriteAck <= InterruptGeneratorBlkWriteAck;
	WriteResp <= InterruptGeneratorBlkWriteResp;

end;
