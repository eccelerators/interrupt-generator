-- Copyright (C) 2023 Eccelerators GmbH
-- 
-- This code was generated by:
--
-- HxS Compiler 1.0.19-10671667
-- VHDL Extension for HxS 1.0.21-b962bd24
-- 
-- Further information at https://eccelerators.com/hxs
-- 
-- Changes to this file may cause incorrect behavior and will be lost if the
-- code is regenerated.
library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;

use work.InterruptGeneratorIfcPackage.all;

entity InterruptGeneratorBlk_InterruptGeneratorIfc is
	port (
		Clk : in std_logic;
		Rst : in std_logic;
		Adr : in std_logic_vector(6 downto 0);
		Sel : in std_logic_vector(3 downto 0);
		DatIn : in std_logic_vector(31 downto 0);
		We : in std_logic;
		Stb : in std_logic;
		Cyc : in  std_logic;
		DatOut : out std_logic_vector(31 downto 0);
		Ack : out std_logic;
		Match : out std_logic;
		ControlReg_ChannelOperation3 : out std_logic;
		ControlReg_ChannelOperation2 : out std_logic;
		ControlReg_ChannelOperation1 : out std_logic;
		ControlReg_ChannelOperation0 : out std_logic;
		StatusReg_ChannelStatus3 : in std_logic_vector(1 downto 0);
		StatusReg_ChannelStatus2 : in std_logic_vector(1 downto 0);
		StatusReg_ChannelStatus1 : in std_logic_vector(1 downto 0);
		StatusReg_ChannelStatus0 : in std_logic_vector(1 downto 0);
		ChargedCountReg0_Count : out std_logic_vector(31 downto 0);
		ChargedCountReg1_Count : out std_logic_vector(31 downto 0);
		ChargedCountReg2_Count : out std_logic_vector(31 downto 0);
		ChargedCountReg3_Count : out std_logic_vector(31 downto 0);
		ActualCountReg0_Count : in std_logic_vector(31 downto 0);
		ActualCountReg1_Count : in std_logic_vector(31 downto 0);
		ActualCountReg2_Count : in std_logic_vector(31 downto 0);
		ActualCountReg3_Count : in std_logic_vector(31 downto 0);
		FailureCountReg0_Count : in std_logic_vector(31 downto 0);
		FailureCountReg1_Count : in std_logic_vector(31 downto 0);
		FailureCountReg2_Count : in std_logic_vector(31 downto 0);
		FailureCountReg3_Count : in std_logic_vector(31 downto 0);
		IntervalReg0_Interval : out std_logic_vector(31 downto 0);
		IntervalReg1_Interval : out std_logic_vector(31 downto 0);
		IntervalReg2_Interval : out std_logic_vector(31 downto 0);
		IntervalReg3_Interval : out std_logic_vector(31 downto 0);
		ReferenceCountReg0_Count : out std_logic_vector(31 downto 0);
		WRegPulseReferenceCountReg0 : out std_logic;
		ReferenceCountReg1_Count : out std_logic_vector(31 downto 0);
		WRegPulseReferenceCountReg1 : out std_logic;
		ReferenceCountReg2_Count : out std_logic_vector(31 downto 0);
		WRegPulseReferenceCountReg2 : out std_logic;
		ReferenceCountReg3_Count : out std_logic_vector(31 downto 0);
		WRegPulseReferenceCountReg3 : out std_logic
	);
end;

architecture Behavioural of InterruptGeneratorBlk_InterruptGeneratorIfc is

	signal PreDatOut : std_logic_vector(31 downto 0);
	
	signal PreDatOutControlReg : std_logic_vector(31 downto 0);
	signal PreReadAckControlReg : std_logic;
	signal ReadDiffControlReg : std_logic;
	signal PreWriteAckControlReg : std_logic;
	signal WriteDiffControlReg : std_logic;
	signal WRegControlReg_ChannelOperation3 : std_logic;
	signal WRegControlReg_ChannelOperation2 : std_logic;
	signal WRegControlReg_ChannelOperation1 : std_logic;
	signal WRegControlReg_ChannelOperation0 : std_logic;
	signal PreMatchReadControlReg : std_logic;
	signal PreMatchWriteControlReg : std_logic;
	
	signal PreDatOutStatusReg : std_logic_vector(31 downto 0);
	signal PreReadAckStatusReg : std_logic;
	signal ReadDiffStatusReg : std_logic;
	signal PreMatchReadStatusReg : std_logic;
	
	signal PreDatOutChargedCountReg0 : std_logic_vector(31 downto 0);
	signal PreReadAckChargedCountReg0 : std_logic;
	signal ReadDiffChargedCountReg0 : std_logic;
	signal PreWriteAckChargedCountReg0 : std_logic;
	signal WriteDiffChargedCountReg0 : std_logic;
	signal WRegChargedCountReg0_Count : std_logic_vector(31 downto 0);
	signal PreMatchReadChargedCountReg0 : std_logic;
	signal PreMatchWriteChargedCountReg0 : std_logic;
	
	signal PreDatOutChargedCountReg1 : std_logic_vector(31 downto 0);
	signal PreReadAckChargedCountReg1 : std_logic;
	signal ReadDiffChargedCountReg1 : std_logic;
	signal PreWriteAckChargedCountReg1 : std_logic;
	signal WriteDiffChargedCountReg1 : std_logic;
	signal WRegChargedCountReg1_Count : std_logic_vector(31 downto 0);
	signal PreMatchReadChargedCountReg1 : std_logic;
	signal PreMatchWriteChargedCountReg1 : std_logic;
	
	signal PreDatOutChargedCountReg2 : std_logic_vector(31 downto 0);
	signal PreReadAckChargedCountReg2 : std_logic;
	signal ReadDiffChargedCountReg2 : std_logic;
	signal PreWriteAckChargedCountReg2 : std_logic;
	signal WriteDiffChargedCountReg2 : std_logic;
	signal WRegChargedCountReg2_Count : std_logic_vector(31 downto 0);
	signal PreMatchReadChargedCountReg2 : std_logic;
	signal PreMatchWriteChargedCountReg2 : std_logic;
	
	signal PreDatOutChargedCountReg3 : std_logic_vector(31 downto 0);
	signal PreReadAckChargedCountReg3 : std_logic;
	signal ReadDiffChargedCountReg3 : std_logic;
	signal PreWriteAckChargedCountReg3 : std_logic;
	signal WriteDiffChargedCountReg3 : std_logic;
	signal WRegChargedCountReg3_Count : std_logic_vector(31 downto 0);
	signal PreMatchReadChargedCountReg3 : std_logic;
	signal PreMatchWriteChargedCountReg3 : std_logic;
	
	signal PreDatOutActualCountReg0 : std_logic_vector(31 downto 0);
	signal PreReadAckActualCountReg0 : std_logic;
	signal ReadDiffActualCountReg0 : std_logic;
	signal PreMatchReadActualCountReg0 : std_logic;
	
	signal PreDatOutActualCountReg1 : std_logic_vector(31 downto 0);
	signal PreReadAckActualCountReg1 : std_logic;
	signal ReadDiffActualCountReg1 : std_logic;
	signal PreMatchReadActualCountReg1 : std_logic;
	
	signal PreDatOutActualCountReg2 : std_logic_vector(31 downto 0);
	signal PreReadAckActualCountReg2 : std_logic;
	signal ReadDiffActualCountReg2 : std_logic;
	signal PreMatchReadActualCountReg2 : std_logic;
	
	signal PreDatOutActualCountReg3 : std_logic_vector(31 downto 0);
	signal PreReadAckActualCountReg3 : std_logic;
	signal ReadDiffActualCountReg3 : std_logic;
	signal PreMatchReadActualCountReg3 : std_logic;
	
	signal PreDatOutFailureCountReg0 : std_logic_vector(31 downto 0);
	signal PreReadAckFailureCountReg0 : std_logic;
	signal ReadDiffFailureCountReg0 : std_logic;
	signal PreMatchReadFailureCountReg0 : std_logic;
	
	signal PreDatOutFailureCountReg1 : std_logic_vector(31 downto 0);
	signal PreReadAckFailureCountReg1 : std_logic;
	signal ReadDiffFailureCountReg1 : std_logic;
	signal PreMatchReadFailureCountReg1 : std_logic;
	
	signal PreDatOutFailureCountReg2 : std_logic_vector(31 downto 0);
	signal PreReadAckFailureCountReg2 : std_logic;
	signal ReadDiffFailureCountReg2 : std_logic;
	signal PreMatchReadFailureCountReg2 : std_logic;
	
	signal PreDatOutFailureCountReg3 : std_logic_vector(31 downto 0);
	signal PreReadAckFailureCountReg3 : std_logic;
	signal ReadDiffFailureCountReg3 : std_logic;
	signal PreMatchReadFailureCountReg3 : std_logic;
	
	signal PreDatOutIntervalReg0 : std_logic_vector(31 downto 0);
	signal PreReadAckIntervalReg0 : std_logic;
	signal ReadDiffIntervalReg0 : std_logic;
	signal PreWriteAckIntervalReg0 : std_logic;
	signal WriteDiffIntervalReg0 : std_logic;
	signal WRegIntervalReg0_Interval : std_logic_vector(31 downto 0);
	signal PreMatchReadIntervalReg0 : std_logic;
	signal PreMatchWriteIntervalReg0 : std_logic;
	
	signal PreDatOutIntervalReg1 : std_logic_vector(31 downto 0);
	signal PreReadAckIntervalReg1 : std_logic;
	signal ReadDiffIntervalReg1 : std_logic;
	signal PreWriteAckIntervalReg1 : std_logic;
	signal WriteDiffIntervalReg1 : std_logic;
	signal WRegIntervalReg1_Interval : std_logic_vector(31 downto 0);
	signal PreMatchReadIntervalReg1 : std_logic;
	signal PreMatchWriteIntervalReg1 : std_logic;
	
	signal PreDatOutIntervalReg2 : std_logic_vector(31 downto 0);
	signal PreReadAckIntervalReg2 : std_logic;
	signal ReadDiffIntervalReg2 : std_logic;
	signal PreWriteAckIntervalReg2 : std_logic;
	signal WriteDiffIntervalReg2 : std_logic;
	signal WRegIntervalReg2_Interval : std_logic_vector(31 downto 0);
	signal PreMatchReadIntervalReg2 : std_logic;
	signal PreMatchWriteIntervalReg2 : std_logic;
	
	signal PreDatOutIntervalReg3 : std_logic_vector(31 downto 0);
	signal PreReadAckIntervalReg3 : std_logic;
	signal ReadDiffIntervalReg3 : std_logic;
	signal PreWriteAckIntervalReg3 : std_logic;
	signal WriteDiffIntervalReg3 : std_logic;
	signal WRegIntervalReg3_Interval : std_logic_vector(31 downto 0);
	signal PreMatchReadIntervalReg3 : std_logic;
	signal PreMatchWriteIntervalReg3 : std_logic;
	
	signal PreDatOutReferenceCountReg0 : std_logic_vector(31 downto 0);
	signal PreReadAckReferenceCountReg0 : std_logic;
	signal ReadDiffReferenceCountReg0 : std_logic;
	signal PreWriteAckReferenceCountReg0 : std_logic;
	signal WriteDiffReferenceCountReg0 : std_logic;
	signal DelWriteDiffReferenceCountReg0 : std_logic;
	signal WRegReferenceCountReg0_Count : std_logic_vector(31 downto 0);
	signal PreMatchReadReferenceCountReg0 : std_logic;
	signal PreMatchWriteReferenceCountReg0 : std_logic;
	
	signal PreDatOutReferenceCountReg1 : std_logic_vector(31 downto 0);
	signal PreReadAckReferenceCountReg1 : std_logic;
	signal ReadDiffReferenceCountReg1 : std_logic;
	signal PreWriteAckReferenceCountReg1 : std_logic;
	signal WriteDiffReferenceCountReg1 : std_logic;
	signal DelWriteDiffReferenceCountReg1 : std_logic;
	signal WRegReferenceCountReg1_Count : std_logic_vector(31 downto 0);
	signal PreMatchReadReferenceCountReg1 : std_logic;
	signal PreMatchWriteReferenceCountReg1 : std_logic;
	
	signal PreDatOutReferenceCountReg2 : std_logic_vector(31 downto 0);
	signal PreReadAckReferenceCountReg2 : std_logic;
	signal ReadDiffReferenceCountReg2 : std_logic;
	signal PreWriteAckReferenceCountReg2 : std_logic;
	signal WriteDiffReferenceCountReg2 : std_logic;
	signal DelWriteDiffReferenceCountReg2 : std_logic;
	signal WRegReferenceCountReg2_Count : std_logic_vector(31 downto 0);
	signal PreMatchReadReferenceCountReg2 : std_logic;
	signal PreMatchWriteReferenceCountReg2 : std_logic;
	
	signal PreDatOutReferenceCountReg3 : std_logic_vector(31 downto 0);
	signal PreReadAckReferenceCountReg3 : std_logic;
	signal ReadDiffReferenceCountReg3 : std_logic;
	signal PreWriteAckReferenceCountReg3 : std_logic;
	signal WriteDiffReferenceCountReg3 : std_logic;
	signal DelWriteDiffReferenceCountReg3 : std_logic;
	signal WRegReferenceCountReg3_Count : std_logic_vector(31 downto 0);
	signal PreMatchReadReferenceCountReg3 : std_logic;
	signal PreMatchWriteReferenceCountReg3 : std_logic;

begin

	DatOut <= PreDatOut;
	
	Match <= PreMatchReadControlReg or PreMatchWriteControlReg
		  or PreMatchReadStatusReg
		  or PreMatchReadChargedCountReg0 or PreMatchWriteChargedCountReg0
		  or PreMatchReadChargedCountReg1 or PreMatchWriteChargedCountReg1
		  or PreMatchReadChargedCountReg2 or PreMatchWriteChargedCountReg2
		  or PreMatchReadChargedCountReg3 or PreMatchWriteChargedCountReg3
		  or PreMatchReadActualCountReg0
		  or PreMatchReadActualCountReg1
		  or PreMatchReadActualCountReg2
		  or PreMatchReadActualCountReg3
		  or PreMatchReadFailureCountReg0
		  or PreMatchReadFailureCountReg1
		  or PreMatchReadFailureCountReg2
		  or PreMatchReadFailureCountReg3
		  or PreMatchReadIntervalReg0 or PreMatchWriteIntervalReg0
		  or PreMatchReadIntervalReg1 or PreMatchWriteIntervalReg1
		  or PreMatchReadIntervalReg2 or PreMatchWriteIntervalReg2
		  or PreMatchReadIntervalReg3 or PreMatchWriteIntervalReg3
		  or PreMatchReadReferenceCountReg0 or PreMatchWriteReferenceCountReg0
		  or PreMatchReadReferenceCountReg1 or PreMatchWriteReferenceCountReg1
		  or PreMatchReadReferenceCountReg2 or PreMatchWriteReferenceCountReg2
		  or PreMatchReadReferenceCountReg3 or PreMatchWriteReferenceCountReg3;
	
	Ack <= PreReadAckControlReg or PreWriteAckControlReg
		or PreReadAckStatusReg
		or PreReadAckChargedCountReg0 or PreWriteAckChargedCountReg0
		or PreReadAckChargedCountReg1 or PreWriteAckChargedCountReg1
		or PreReadAckChargedCountReg2 or PreWriteAckChargedCountReg2
		or PreReadAckChargedCountReg3 or PreWriteAckChargedCountReg3
		or PreReadAckActualCountReg0
		or PreReadAckActualCountReg1
		or PreReadAckActualCountReg2
		or PreReadAckActualCountReg3
		or PreReadAckFailureCountReg0
		or PreReadAckFailureCountReg1
		or PreReadAckFailureCountReg2
		or PreReadAckFailureCountReg3
		or PreReadAckIntervalReg0 or PreWriteAckIntervalReg0
		or PreReadAckIntervalReg1 or PreWriteAckIntervalReg1
		or PreReadAckIntervalReg2 or PreWriteAckIntervalReg2
		or PreReadAckIntervalReg3 or PreWriteAckIntervalReg3
		or PreReadAckReferenceCountReg0 or PreWriteAckReferenceCountReg0
		or PreReadAckReferenceCountReg1 or PreWriteAckReferenceCountReg1
		or PreReadAckReferenceCountReg2 or PreWriteAckReferenceCountReg2
		or PreReadAckReferenceCountReg3 or PreWriteAckReferenceCountReg3;
	
	PreDatOutMux: process (
		PreDatOutControlReg,
		PreMatchReadControlReg,
		PreReadAckControlReg,
		PreDatOutStatusReg,
		PreMatchReadStatusReg,
		PreReadAckStatusReg,
		PreDatOutChargedCountReg0,
		PreMatchReadChargedCountReg0,
		PreReadAckChargedCountReg0,
		PreDatOutChargedCountReg1,
		PreMatchReadChargedCountReg1,
		PreReadAckChargedCountReg1,
		PreDatOutChargedCountReg2,
		PreMatchReadChargedCountReg2,
		PreReadAckChargedCountReg2,
		PreDatOutChargedCountReg3,
		PreMatchReadChargedCountReg3,
		PreReadAckChargedCountReg3,
		PreDatOutActualCountReg0,
		PreMatchReadActualCountReg0,
		PreReadAckActualCountReg0,
		PreDatOutActualCountReg1,
		PreMatchReadActualCountReg1,
		PreReadAckActualCountReg1,
		PreDatOutActualCountReg2,
		PreMatchReadActualCountReg2,
		PreReadAckActualCountReg2,
		PreDatOutActualCountReg3,
		PreMatchReadActualCountReg3,
		PreReadAckActualCountReg3,
		PreDatOutFailureCountReg0,
		PreMatchReadFailureCountReg0,
		PreReadAckFailureCountReg0,
		PreDatOutFailureCountReg1,
		PreMatchReadFailureCountReg1,
		PreReadAckFailureCountReg1,
		PreDatOutFailureCountReg2,
		PreMatchReadFailureCountReg2,
		PreReadAckFailureCountReg2,
		PreDatOutFailureCountReg3,
		PreMatchReadFailureCountReg3,
		PreReadAckFailureCountReg3,
		PreDatOutIntervalReg0,
		PreMatchReadIntervalReg0,
		PreReadAckIntervalReg0,
		PreDatOutIntervalReg1,
		PreMatchReadIntervalReg1,
		PreReadAckIntervalReg1,
		PreDatOutIntervalReg2,
		PreMatchReadIntervalReg2,
		PreReadAckIntervalReg2,
		PreDatOutIntervalReg3,
		PreMatchReadIntervalReg3,
		PreReadAckIntervalReg3,
		PreDatOutReferenceCountReg0,
		PreMatchReadReferenceCountReg0,
		PreReadAckReferenceCountReg0,
		PreDatOutReferenceCountReg1,
		PreMatchReadReferenceCountReg1,
		PreReadAckReferenceCountReg1,
		PreDatOutReferenceCountReg2,
		PreMatchReadReferenceCountReg2,
		PreReadAckReferenceCountReg2,
		PreDatOutReferenceCountReg3,
		PreMatchReadReferenceCountReg3,
		PreReadAckReferenceCountReg3
	) begin
		PreDatOut <= (others => '0');
		if (PreMatchReadControlReg = '1' and PreReadAckControlReg = '1') then
			PreDatOut <= std_logic_vector(resize(unsigned(PreDatOutControlReg), PreDatOut'LENGTH));
		elsif (PreMatchReadStatusReg = '1' and PreReadAckStatusReg = '1') then
			PreDatOut <= std_logic_vector(resize(unsigned(PreDatOutStatusReg), PreDatOut'LENGTH));
		elsif (PreMatchReadChargedCountReg0 = '1' and PreReadAckChargedCountReg0 = '1') then
			PreDatOut <= std_logic_vector(resize(unsigned(PreDatOutChargedCountReg0), PreDatOut'LENGTH));
		elsif (PreMatchReadChargedCountReg1 = '1' and PreReadAckChargedCountReg1 = '1') then
			PreDatOut <= std_logic_vector(resize(unsigned(PreDatOutChargedCountReg1), PreDatOut'LENGTH));
		elsif (PreMatchReadChargedCountReg2 = '1' and PreReadAckChargedCountReg2 = '1') then
			PreDatOut <= std_logic_vector(resize(unsigned(PreDatOutChargedCountReg2), PreDatOut'LENGTH));
		elsif (PreMatchReadChargedCountReg3 = '1' and PreReadAckChargedCountReg3 = '1') then
			PreDatOut <= std_logic_vector(resize(unsigned(PreDatOutChargedCountReg3), PreDatOut'LENGTH));
		elsif (PreMatchReadActualCountReg0 = '1' and PreReadAckActualCountReg0 = '1') then
			PreDatOut <= std_logic_vector(resize(unsigned(PreDatOutActualCountReg0), PreDatOut'LENGTH));
		elsif (PreMatchReadActualCountReg1 = '1' and PreReadAckActualCountReg1 = '1') then
			PreDatOut <= std_logic_vector(resize(unsigned(PreDatOutActualCountReg1), PreDatOut'LENGTH));
		elsif (PreMatchReadActualCountReg2 = '1' and PreReadAckActualCountReg2 = '1') then
			PreDatOut <= std_logic_vector(resize(unsigned(PreDatOutActualCountReg2), PreDatOut'LENGTH));
		elsif (PreMatchReadActualCountReg3 = '1' and PreReadAckActualCountReg3 = '1') then
			PreDatOut <= std_logic_vector(resize(unsigned(PreDatOutActualCountReg3), PreDatOut'LENGTH));
		elsif (PreMatchReadFailureCountReg0 = '1' and PreReadAckFailureCountReg0 = '1') then
			PreDatOut <= std_logic_vector(resize(unsigned(PreDatOutFailureCountReg0), PreDatOut'LENGTH));
		elsif (PreMatchReadFailureCountReg1 = '1' and PreReadAckFailureCountReg1 = '1') then
			PreDatOut <= std_logic_vector(resize(unsigned(PreDatOutFailureCountReg1), PreDatOut'LENGTH));
		elsif (PreMatchReadFailureCountReg2 = '1' and PreReadAckFailureCountReg2 = '1') then
			PreDatOut <= std_logic_vector(resize(unsigned(PreDatOutFailureCountReg2), PreDatOut'LENGTH));
		elsif (PreMatchReadFailureCountReg3 = '1' and PreReadAckFailureCountReg3 = '1') then
			PreDatOut <= std_logic_vector(resize(unsigned(PreDatOutFailureCountReg3), PreDatOut'LENGTH));
		elsif (PreMatchReadIntervalReg0 = '1' and PreReadAckIntervalReg0 = '1') then
			PreDatOut <= std_logic_vector(resize(unsigned(PreDatOutIntervalReg0), PreDatOut'LENGTH));
		elsif (PreMatchReadIntervalReg1 = '1' and PreReadAckIntervalReg1 = '1') then
			PreDatOut <= std_logic_vector(resize(unsigned(PreDatOutIntervalReg1), PreDatOut'LENGTH));
		elsif (PreMatchReadIntervalReg2 = '1' and PreReadAckIntervalReg2 = '1') then
			PreDatOut <= std_logic_vector(resize(unsigned(PreDatOutIntervalReg2), PreDatOut'LENGTH));
		elsif (PreMatchReadIntervalReg3 = '1' and PreReadAckIntervalReg3 = '1') then
			PreDatOut <= std_logic_vector(resize(unsigned(PreDatOutIntervalReg3), PreDatOut'LENGTH));
		elsif (PreMatchReadReferenceCountReg0 = '1' and PreReadAckReferenceCountReg0 = '1') then
			PreDatOut <= std_logic_vector(resize(unsigned(PreDatOutReferenceCountReg0), PreDatOut'LENGTH));
		elsif (PreMatchReadReferenceCountReg1 = '1' and PreReadAckReferenceCountReg1 = '1') then
			PreDatOut <= std_logic_vector(resize(unsigned(PreDatOutReferenceCountReg1), PreDatOut'LENGTH));
		elsif (PreMatchReadReferenceCountReg2 = '1' and PreReadAckReferenceCountReg2 = '1') then
			PreDatOut <= std_logic_vector(resize(unsigned(PreDatOutReferenceCountReg2), PreDatOut'LENGTH));
		elsif (PreMatchReadReferenceCountReg3 = '1' and PreReadAckReferenceCountReg3 = '1') then
			PreDatOut <= std_logic_vector(resize(unsigned(PreDatOutReferenceCountReg3), PreDatOut'LENGTH));
		end if;
	end process;
	
	PreMatchReadControlRegProcess : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(CONTROLREG_ADDRESS)) then
			PreMatchReadControlReg <= not We and Stb and Cyc;
		else
			PreMatchReadControlReg <= '0';
		end if;
	end process;
	
	PreMatchWriteControlRegProcess : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(CONTROLREG_ADDRESS)) then
			PreMatchWriteControlReg <= We and Stb and Cyc;
		else
			PreMatchWriteControlReg <= '0';
		end if;
	end process;
	
	WriteDiffControlRegProcess : process (Adr, We, Stb, Cyc, PreWriteAckControlReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(CONTROLREG_ADDRESS)) then
			WriteDiffControlReg <=  We and Stb and Cyc and not PreWriteAckControlReg;
		else
			WriteDiffControlReg <= '0';
		end if;
	end process;
	
	ReadDiffControlRegProcess : process (Adr, We, Stb, Cyc, PreReadAckControlReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(CONTROLREG_ADDRESS)) then
			ReadDiffControlReg <= not We and Stb and Cyc and not PreReadAckControlReg;
		else
			ReadDiffControlReg <= '0';
		end if;
	end process;
	
	SyncPartControlReg : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckControlReg <= '0';
			PreWriteAckControlReg <= '0';
			WRegControlReg_ChannelOperation3 <= CONTROLREG_CHANNELOPERATION3_DISABLED;
			WRegControlReg_ChannelOperation2 <= CONTROLREG_CHANNELOPERATION2_DISABLED;
			WRegControlReg_ChannelOperation1 <= CONTROLREG_CHANNELOPERATION1_DISABLED;
			WRegControlReg_ChannelOperation0 <= CONTROLREG_CHANNELOPERATION0_DISABLED;
		elsif rising_edge(Clk) then
			PreWriteAckControlReg <= WriteDiffControlReg;
			PreReadAckControlReg <= ReadDiffControlReg;
			if (WriteDiffControlReg = '1') then
				if (Sel(0) = '1') then WRegControlReg_ChannelOperation0 <= DatIn(0); end if;
				if (Sel(0) = '1') then WRegControlReg_ChannelOperation1 <= DatIn(1); end if;
				if (Sel(0) = '1') then WRegControlReg_ChannelOperation2 <= DatIn(2); end if;
				if (Sel(0) = '1') then WRegControlReg_ChannelOperation3 <= DatIn(3); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForControlReg : process (
		WRegControlReg_ChannelOperation3,
		WRegControlReg_ChannelOperation2,
		WRegControlReg_ChannelOperation1,
		WRegControlReg_ChannelOperation0
	) begin
		PreDatOutControlReg <= (others => '0');
		PreDatOutControlReg(3) <= WRegControlReg_ChannelOperation3;
		PreDatOutControlReg(2) <= WRegControlReg_ChannelOperation2;
		PreDatOutControlReg(1) <= WRegControlReg_ChannelOperation1;
		PreDatOutControlReg(0) <= WRegControlReg_ChannelOperation0;
	end process;
	
	ControlReg_ChannelOperation3 <= WRegControlReg_ChannelOperation3;
	ControlReg_ChannelOperation2 <= WRegControlReg_ChannelOperation2;
	ControlReg_ChannelOperation1 <= WRegControlReg_ChannelOperation1;
	ControlReg_ChannelOperation0 <= WRegControlReg_ChannelOperation0;
	
	PreMatchReadStatusRegProcess : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(STATUSREG_ADDRESS)) then
			PreMatchReadStatusReg <= not We and Stb and Cyc;
		else
			PreMatchReadStatusReg <= '0';
		end if;
	end process;
	
	ReadDiffStatusRegProcess : process (Adr, We, Stb, Cyc, PreReadAckStatusReg)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(STATUSREG_ADDRESS)) then
			ReadDiffStatusReg <= not We and Stb and Cyc and not PreReadAckStatusReg;
		else
			ReadDiffStatusReg <= '0';
		end if;
	end process;
	
	SyncPartStatusReg : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckStatusReg <= '0';
		elsif rising_edge(Clk) then
			PreReadAckStatusReg <= ReadDiffStatusReg;
		end if;
	end process;
	
	DataOutPreMuxForStatusReg : process (
		StatusReg_ChannelStatus3,
		StatusReg_ChannelStatus2,
		StatusReg_ChannelStatus1,
		StatusReg_ChannelStatus0
	) begin
		PreDatOutStatusReg <= (others => '0');
		PreDatOutStatusReg(7 downto 6) <= StatusReg_ChannelStatus3;
		PreDatOutStatusReg(5 downto 4) <= StatusReg_ChannelStatus2;
		PreDatOutStatusReg(3 downto 2) <= StatusReg_ChannelStatus1;
		PreDatOutStatusReg(1 downto 0) <= StatusReg_ChannelStatus0;
	end process;
	
	PreMatchReadChargedCountReg0Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(CHARGEDCOUNTREG0_ADDRESS)) then
			PreMatchReadChargedCountReg0 <= not We and Stb and Cyc;
		else
			PreMatchReadChargedCountReg0 <= '0';
		end if;
	end process;
	
	PreMatchWriteChargedCountReg0Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(CHARGEDCOUNTREG0_ADDRESS)) then
			PreMatchWriteChargedCountReg0 <= We and Stb and Cyc;
		else
			PreMatchWriteChargedCountReg0 <= '0';
		end if;
	end process;
	
	WriteDiffChargedCountReg0Process : process (Adr, We, Stb, Cyc, PreWriteAckChargedCountReg0)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(CHARGEDCOUNTREG0_ADDRESS)) then
			WriteDiffChargedCountReg0 <=  We and Stb and Cyc and not PreWriteAckChargedCountReg0;
		else
			WriteDiffChargedCountReg0 <= '0';
		end if;
	end process;
	
	ReadDiffChargedCountReg0Process : process (Adr, We, Stb, Cyc, PreReadAckChargedCountReg0)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(CHARGEDCOUNTREG0_ADDRESS)) then
			ReadDiffChargedCountReg0 <= not We and Stb and Cyc and not PreReadAckChargedCountReg0;
		else
			ReadDiffChargedCountReg0 <= '0';
		end if;
	end process;
	
	SyncPartChargedCountReg0 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckChargedCountReg0 <= '0';
			PreWriteAckChargedCountReg0 <= '0';
			WRegChargedCountReg0_Count <= (others => '0');
		elsif rising_edge(Clk) then
			PreWriteAckChargedCountReg0 <= WriteDiffChargedCountReg0;
			PreReadAckChargedCountReg0 <= ReadDiffChargedCountReg0;
			if (WriteDiffChargedCountReg0 = '1') then
				if (Sel(3) = '1') then WRegChargedCountReg0_Count(31 downto 24) <= DatIn(31 downto 24); end if;
				if (Sel(2) = '1') then WRegChargedCountReg0_Count(23 downto 16) <= DatIn(23 downto 16); end if;
				if (Sel(1) = '1') then WRegChargedCountReg0_Count(15 downto 8) <= DatIn(15 downto 8); end if;
				if (Sel(0) = '1') then WRegChargedCountReg0_Count(7 downto 0) <= DatIn(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForChargedCountReg0 : process (
		WRegChargedCountReg0_Count
	) begin
		PreDatOutChargedCountReg0 <= (others => '0');
		PreDatOutChargedCountReg0(31 downto 0) <= WRegChargedCountReg0_Count;
	end process;
	
	ChargedCountReg0_Count <= WRegChargedCountReg0_Count;
	
	PreMatchReadChargedCountReg1Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(CHARGEDCOUNTREG1_ADDRESS)) then
			PreMatchReadChargedCountReg1 <= not We and Stb and Cyc;
		else
			PreMatchReadChargedCountReg1 <= '0';
		end if;
	end process;
	
	PreMatchWriteChargedCountReg1Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(CHARGEDCOUNTREG1_ADDRESS)) then
			PreMatchWriteChargedCountReg1 <= We and Stb and Cyc;
		else
			PreMatchWriteChargedCountReg1 <= '0';
		end if;
	end process;
	
	WriteDiffChargedCountReg1Process : process (Adr, We, Stb, Cyc, PreWriteAckChargedCountReg1)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(CHARGEDCOUNTREG1_ADDRESS)) then
			WriteDiffChargedCountReg1 <=  We and Stb and Cyc and not PreWriteAckChargedCountReg1;
		else
			WriteDiffChargedCountReg1 <= '0';
		end if;
	end process;
	
	ReadDiffChargedCountReg1Process : process (Adr, We, Stb, Cyc, PreReadAckChargedCountReg1)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(CHARGEDCOUNTREG1_ADDRESS)) then
			ReadDiffChargedCountReg1 <= not We and Stb and Cyc and not PreReadAckChargedCountReg1;
		else
			ReadDiffChargedCountReg1 <= '0';
		end if;
	end process;
	
	SyncPartChargedCountReg1 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckChargedCountReg1 <= '0';
			PreWriteAckChargedCountReg1 <= '0';
			WRegChargedCountReg1_Count <= (others => '0');
		elsif rising_edge(Clk) then
			PreWriteAckChargedCountReg1 <= WriteDiffChargedCountReg1;
			PreReadAckChargedCountReg1 <= ReadDiffChargedCountReg1;
			if (WriteDiffChargedCountReg1 = '1') then
				if (Sel(3) = '1') then WRegChargedCountReg1_Count(31 downto 24) <= DatIn(31 downto 24); end if;
				if (Sel(2) = '1') then WRegChargedCountReg1_Count(23 downto 16) <= DatIn(23 downto 16); end if;
				if (Sel(1) = '1') then WRegChargedCountReg1_Count(15 downto 8) <= DatIn(15 downto 8); end if;
				if (Sel(0) = '1') then WRegChargedCountReg1_Count(7 downto 0) <= DatIn(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForChargedCountReg1 : process (
		WRegChargedCountReg1_Count
	) begin
		PreDatOutChargedCountReg1 <= (others => '0');
		PreDatOutChargedCountReg1(31 downto 0) <= WRegChargedCountReg1_Count;
	end process;
	
	ChargedCountReg1_Count <= WRegChargedCountReg1_Count;
	
	PreMatchReadChargedCountReg2Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(CHARGEDCOUNTREG2_ADDRESS)) then
			PreMatchReadChargedCountReg2 <= not We and Stb and Cyc;
		else
			PreMatchReadChargedCountReg2 <= '0';
		end if;
	end process;
	
	PreMatchWriteChargedCountReg2Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(CHARGEDCOUNTREG2_ADDRESS)) then
			PreMatchWriteChargedCountReg2 <= We and Stb and Cyc;
		else
			PreMatchWriteChargedCountReg2 <= '0';
		end if;
	end process;
	
	WriteDiffChargedCountReg2Process : process (Adr, We, Stb, Cyc, PreWriteAckChargedCountReg2)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(CHARGEDCOUNTREG2_ADDRESS)) then
			WriteDiffChargedCountReg2 <=  We and Stb and Cyc and not PreWriteAckChargedCountReg2;
		else
			WriteDiffChargedCountReg2 <= '0';
		end if;
	end process;
	
	ReadDiffChargedCountReg2Process : process (Adr, We, Stb, Cyc, PreReadAckChargedCountReg2)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(CHARGEDCOUNTREG2_ADDRESS)) then
			ReadDiffChargedCountReg2 <= not We and Stb and Cyc and not PreReadAckChargedCountReg2;
		else
			ReadDiffChargedCountReg2 <= '0';
		end if;
	end process;
	
	SyncPartChargedCountReg2 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckChargedCountReg2 <= '0';
			PreWriteAckChargedCountReg2 <= '0';
			WRegChargedCountReg2_Count <= (others => '0');
		elsif rising_edge(Clk) then
			PreWriteAckChargedCountReg2 <= WriteDiffChargedCountReg2;
			PreReadAckChargedCountReg2 <= ReadDiffChargedCountReg2;
			if (WriteDiffChargedCountReg2 = '1') then
				if (Sel(3) = '1') then WRegChargedCountReg2_Count(31 downto 24) <= DatIn(31 downto 24); end if;
				if (Sel(2) = '1') then WRegChargedCountReg2_Count(23 downto 16) <= DatIn(23 downto 16); end if;
				if (Sel(1) = '1') then WRegChargedCountReg2_Count(15 downto 8) <= DatIn(15 downto 8); end if;
				if (Sel(0) = '1') then WRegChargedCountReg2_Count(7 downto 0) <= DatIn(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForChargedCountReg2 : process (
		WRegChargedCountReg2_Count
	) begin
		PreDatOutChargedCountReg2 <= (others => '0');
		PreDatOutChargedCountReg2(31 downto 0) <= WRegChargedCountReg2_Count;
	end process;
	
	ChargedCountReg2_Count <= WRegChargedCountReg2_Count;
	
	PreMatchReadChargedCountReg3Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(CHARGEDCOUNTREG3_ADDRESS)) then
			PreMatchReadChargedCountReg3 <= not We and Stb and Cyc;
		else
			PreMatchReadChargedCountReg3 <= '0';
		end if;
	end process;
	
	PreMatchWriteChargedCountReg3Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(CHARGEDCOUNTREG3_ADDRESS)) then
			PreMatchWriteChargedCountReg3 <= We and Stb and Cyc;
		else
			PreMatchWriteChargedCountReg3 <= '0';
		end if;
	end process;
	
	WriteDiffChargedCountReg3Process : process (Adr, We, Stb, Cyc, PreWriteAckChargedCountReg3)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(CHARGEDCOUNTREG3_ADDRESS)) then
			WriteDiffChargedCountReg3 <=  We and Stb and Cyc and not PreWriteAckChargedCountReg3;
		else
			WriteDiffChargedCountReg3 <= '0';
		end if;
	end process;
	
	ReadDiffChargedCountReg3Process : process (Adr, We, Stb, Cyc, PreReadAckChargedCountReg3)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(CHARGEDCOUNTREG3_ADDRESS)) then
			ReadDiffChargedCountReg3 <= not We and Stb and Cyc and not PreReadAckChargedCountReg3;
		else
			ReadDiffChargedCountReg3 <= '0';
		end if;
	end process;
	
	SyncPartChargedCountReg3 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckChargedCountReg3 <= '0';
			PreWriteAckChargedCountReg3 <= '0';
			WRegChargedCountReg3_Count <= (others => '0');
		elsif rising_edge(Clk) then
			PreWriteAckChargedCountReg3 <= WriteDiffChargedCountReg3;
			PreReadAckChargedCountReg3 <= ReadDiffChargedCountReg3;
			if (WriteDiffChargedCountReg3 = '1') then
				if (Sel(3) = '1') then WRegChargedCountReg3_Count(31 downto 24) <= DatIn(31 downto 24); end if;
				if (Sel(2) = '1') then WRegChargedCountReg3_Count(23 downto 16) <= DatIn(23 downto 16); end if;
				if (Sel(1) = '1') then WRegChargedCountReg3_Count(15 downto 8) <= DatIn(15 downto 8); end if;
				if (Sel(0) = '1') then WRegChargedCountReg3_Count(7 downto 0) <= DatIn(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForChargedCountReg3 : process (
		WRegChargedCountReg3_Count
	) begin
		PreDatOutChargedCountReg3 <= (others => '0');
		PreDatOutChargedCountReg3(31 downto 0) <= WRegChargedCountReg3_Count;
	end process;
	
	ChargedCountReg3_Count <= WRegChargedCountReg3_Count;
	
	PreMatchReadActualCountReg0Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(ACTUALCOUNTREG0_ADDRESS)) then
			PreMatchReadActualCountReg0 <= not We and Stb and Cyc;
		else
			PreMatchReadActualCountReg0 <= '0';
		end if;
	end process;
	
	ReadDiffActualCountReg0Process : process (Adr, We, Stb, Cyc, PreReadAckActualCountReg0)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(ACTUALCOUNTREG0_ADDRESS)) then
			ReadDiffActualCountReg0 <= not We and Stb and Cyc and not PreReadAckActualCountReg0;
		else
			ReadDiffActualCountReg0 <= '0';
		end if;
	end process;
	
	SyncPartActualCountReg0 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckActualCountReg0 <= '0';
		elsif rising_edge(Clk) then
			PreReadAckActualCountReg0 <= ReadDiffActualCountReg0;
		end if;
	end process;
	
	DataOutPreMuxForActualCountReg0 : process (
		ActualCountReg0_Count
	) begin
		PreDatOutActualCountReg0 <= (others => '0');
		PreDatOutActualCountReg0(31 downto 0) <= ActualCountReg0_Count;
	end process;
	
	PreMatchReadActualCountReg1Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(ACTUALCOUNTREG1_ADDRESS)) then
			PreMatchReadActualCountReg1 <= not We and Stb and Cyc;
		else
			PreMatchReadActualCountReg1 <= '0';
		end if;
	end process;
	
	ReadDiffActualCountReg1Process : process (Adr, We, Stb, Cyc, PreReadAckActualCountReg1)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(ACTUALCOUNTREG1_ADDRESS)) then
			ReadDiffActualCountReg1 <= not We and Stb and Cyc and not PreReadAckActualCountReg1;
		else
			ReadDiffActualCountReg1 <= '0';
		end if;
	end process;
	
	SyncPartActualCountReg1 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckActualCountReg1 <= '0';
		elsif rising_edge(Clk) then
			PreReadAckActualCountReg1 <= ReadDiffActualCountReg1;
		end if;
	end process;
	
	DataOutPreMuxForActualCountReg1 : process (
		ActualCountReg1_Count
	) begin
		PreDatOutActualCountReg1 <= (others => '0');
		PreDatOutActualCountReg1(31 downto 0) <= ActualCountReg1_Count;
	end process;
	
	PreMatchReadActualCountReg2Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(ACTUALCOUNTREG2_ADDRESS)) then
			PreMatchReadActualCountReg2 <= not We and Stb and Cyc;
		else
			PreMatchReadActualCountReg2 <= '0';
		end if;
	end process;
	
	ReadDiffActualCountReg2Process : process (Adr, We, Stb, Cyc, PreReadAckActualCountReg2)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(ACTUALCOUNTREG2_ADDRESS)) then
			ReadDiffActualCountReg2 <= not We and Stb and Cyc and not PreReadAckActualCountReg2;
		else
			ReadDiffActualCountReg2 <= '0';
		end if;
	end process;
	
	SyncPartActualCountReg2 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckActualCountReg2 <= '0';
		elsif rising_edge(Clk) then
			PreReadAckActualCountReg2 <= ReadDiffActualCountReg2;
		end if;
	end process;
	
	DataOutPreMuxForActualCountReg2 : process (
		ActualCountReg2_Count
	) begin
		PreDatOutActualCountReg2 <= (others => '0');
		PreDatOutActualCountReg2(31 downto 0) <= ActualCountReg2_Count;
	end process;
	
	PreMatchReadActualCountReg3Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(ACTUALCOUNTREG3_ADDRESS)) then
			PreMatchReadActualCountReg3 <= not We and Stb and Cyc;
		else
			PreMatchReadActualCountReg3 <= '0';
		end if;
	end process;
	
	ReadDiffActualCountReg3Process : process (Adr, We, Stb, Cyc, PreReadAckActualCountReg3)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(ACTUALCOUNTREG3_ADDRESS)) then
			ReadDiffActualCountReg3 <= not We and Stb and Cyc and not PreReadAckActualCountReg3;
		else
			ReadDiffActualCountReg3 <= '0';
		end if;
	end process;
	
	SyncPartActualCountReg3 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckActualCountReg3 <= '0';
		elsif rising_edge(Clk) then
			PreReadAckActualCountReg3 <= ReadDiffActualCountReg3;
		end if;
	end process;
	
	DataOutPreMuxForActualCountReg3 : process (
		ActualCountReg3_Count
	) begin
		PreDatOutActualCountReg3 <= (others => '0');
		PreDatOutActualCountReg3(31 downto 0) <= ActualCountReg3_Count;
	end process;
	
	PreMatchReadFailureCountReg0Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(FAILURECOUNTREG0_ADDRESS)) then
			PreMatchReadFailureCountReg0 <= not We and Stb and Cyc;
		else
			PreMatchReadFailureCountReg0 <= '0';
		end if;
	end process;
	
	ReadDiffFailureCountReg0Process : process (Adr, We, Stb, Cyc, PreReadAckFailureCountReg0)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(FAILURECOUNTREG0_ADDRESS)) then
			ReadDiffFailureCountReg0 <= not We and Stb and Cyc and not PreReadAckFailureCountReg0;
		else
			ReadDiffFailureCountReg0 <= '0';
		end if;
	end process;
	
	SyncPartFailureCountReg0 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckFailureCountReg0 <= '0';
		elsif rising_edge(Clk) then
			PreReadAckFailureCountReg0 <= ReadDiffFailureCountReg0;
		end if;
	end process;
	
	DataOutPreMuxForFailureCountReg0 : process (
		FailureCountReg0_Count
	) begin
		PreDatOutFailureCountReg0 <= (others => '0');
		PreDatOutFailureCountReg0(31 downto 0) <= FailureCountReg0_Count;
	end process;
	
	PreMatchReadFailureCountReg1Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(FAILURECOUNTREG1_ADDRESS)) then
			PreMatchReadFailureCountReg1 <= not We and Stb and Cyc;
		else
			PreMatchReadFailureCountReg1 <= '0';
		end if;
	end process;
	
	ReadDiffFailureCountReg1Process : process (Adr, We, Stb, Cyc, PreReadAckFailureCountReg1)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(FAILURECOUNTREG1_ADDRESS)) then
			ReadDiffFailureCountReg1 <= not We and Stb and Cyc and not PreReadAckFailureCountReg1;
		else
			ReadDiffFailureCountReg1 <= '0';
		end if;
	end process;
	
	SyncPartFailureCountReg1 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckFailureCountReg1 <= '0';
		elsif rising_edge(Clk) then
			PreReadAckFailureCountReg1 <= ReadDiffFailureCountReg1;
		end if;
	end process;
	
	DataOutPreMuxForFailureCountReg1 : process (
		FailureCountReg1_Count
	) begin
		PreDatOutFailureCountReg1 <= (others => '0');
		PreDatOutFailureCountReg1(31 downto 0) <= FailureCountReg1_Count;
	end process;
	
	PreMatchReadFailureCountReg2Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(FAILURECOUNTREG2_ADDRESS)) then
			PreMatchReadFailureCountReg2 <= not We and Stb and Cyc;
		else
			PreMatchReadFailureCountReg2 <= '0';
		end if;
	end process;
	
	ReadDiffFailureCountReg2Process : process (Adr, We, Stb, Cyc, PreReadAckFailureCountReg2)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(FAILURECOUNTREG2_ADDRESS)) then
			ReadDiffFailureCountReg2 <= not We and Stb and Cyc and not PreReadAckFailureCountReg2;
		else
			ReadDiffFailureCountReg2 <= '0';
		end if;
	end process;
	
	SyncPartFailureCountReg2 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckFailureCountReg2 <= '0';
		elsif rising_edge(Clk) then
			PreReadAckFailureCountReg2 <= ReadDiffFailureCountReg2;
		end if;
	end process;
	
	DataOutPreMuxForFailureCountReg2 : process (
		FailureCountReg2_Count
	) begin
		PreDatOutFailureCountReg2 <= (others => '0');
		PreDatOutFailureCountReg2(31 downto 0) <= FailureCountReg2_Count;
	end process;
	
	PreMatchReadFailureCountReg3Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(FAILURECOUNTREG3_ADDRESS)) then
			PreMatchReadFailureCountReg3 <= not We and Stb and Cyc;
		else
			PreMatchReadFailureCountReg3 <= '0';
		end if;
	end process;
	
	ReadDiffFailureCountReg3Process : process (Adr, We, Stb, Cyc, PreReadAckFailureCountReg3)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(FAILURECOUNTREG3_ADDRESS)) then
			ReadDiffFailureCountReg3 <= not We and Stb and Cyc and not PreReadAckFailureCountReg3;
		else
			ReadDiffFailureCountReg3 <= '0';
		end if;
	end process;
	
	SyncPartFailureCountReg3 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckFailureCountReg3 <= '0';
		elsif rising_edge(Clk) then
			PreReadAckFailureCountReg3 <= ReadDiffFailureCountReg3;
		end if;
	end process;
	
	DataOutPreMuxForFailureCountReg3 : process (
		FailureCountReg3_Count
	) begin
		PreDatOutFailureCountReg3 <= (others => '0');
		PreDatOutFailureCountReg3(31 downto 0) <= FailureCountReg3_Count;
	end process;
	
	PreMatchReadIntervalReg0Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(INTERVALREG0_ADDRESS)) then
			PreMatchReadIntervalReg0 <= not We and Stb and Cyc;
		else
			PreMatchReadIntervalReg0 <= '0';
		end if;
	end process;
	
	PreMatchWriteIntervalReg0Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(INTERVALREG0_ADDRESS)) then
			PreMatchWriteIntervalReg0 <= We and Stb and Cyc;
		else
			PreMatchWriteIntervalReg0 <= '0';
		end if;
	end process;
	
	WriteDiffIntervalReg0Process : process (Adr, We, Stb, Cyc, PreWriteAckIntervalReg0)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(INTERVALREG0_ADDRESS)) then
			WriteDiffIntervalReg0 <=  We and Stb and Cyc and not PreWriteAckIntervalReg0;
		else
			WriteDiffIntervalReg0 <= '0';
		end if;
	end process;
	
	ReadDiffIntervalReg0Process : process (Adr, We, Stb, Cyc, PreReadAckIntervalReg0)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(INTERVALREG0_ADDRESS)) then
			ReadDiffIntervalReg0 <= not We and Stb and Cyc and not PreReadAckIntervalReg0;
		else
			ReadDiffIntervalReg0 <= '0';
		end if;
	end process;
	
	SyncPartIntervalReg0 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckIntervalReg0 <= '0';
			PreWriteAckIntervalReg0 <= '0';
			WRegIntervalReg0_Interval <= (others => '0');
		elsif rising_edge(Clk) then
			PreWriteAckIntervalReg0 <= WriteDiffIntervalReg0;
			PreReadAckIntervalReg0 <= ReadDiffIntervalReg0;
			if (WriteDiffIntervalReg0 = '1') then
				if (Sel(3) = '1') then WRegIntervalReg0_Interval(31 downto 24) <= DatIn(31 downto 24); end if;
				if (Sel(2) = '1') then WRegIntervalReg0_Interval(23 downto 16) <= DatIn(23 downto 16); end if;
				if (Sel(1) = '1') then WRegIntervalReg0_Interval(15 downto 8) <= DatIn(15 downto 8); end if;
				if (Sel(0) = '1') then WRegIntervalReg0_Interval(7 downto 0) <= DatIn(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForIntervalReg0 : process (
		WRegIntervalReg0_Interval
	) begin
		PreDatOutIntervalReg0 <= (others => '0');
		PreDatOutIntervalReg0(31 downto 0) <= WRegIntervalReg0_Interval;
	end process;
	
	IntervalReg0_Interval <= WRegIntervalReg0_Interval;
	
	PreMatchReadIntervalReg1Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(INTERVALREG1_ADDRESS)) then
			PreMatchReadIntervalReg1 <= not We and Stb and Cyc;
		else
			PreMatchReadIntervalReg1 <= '0';
		end if;
	end process;
	
	PreMatchWriteIntervalReg1Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(INTERVALREG1_ADDRESS)) then
			PreMatchWriteIntervalReg1 <= We and Stb and Cyc;
		else
			PreMatchWriteIntervalReg1 <= '0';
		end if;
	end process;
	
	WriteDiffIntervalReg1Process : process (Adr, We, Stb, Cyc, PreWriteAckIntervalReg1)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(INTERVALREG1_ADDRESS)) then
			WriteDiffIntervalReg1 <=  We and Stb and Cyc and not PreWriteAckIntervalReg1;
		else
			WriteDiffIntervalReg1 <= '0';
		end if;
	end process;
	
	ReadDiffIntervalReg1Process : process (Adr, We, Stb, Cyc, PreReadAckIntervalReg1)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(INTERVALREG1_ADDRESS)) then
			ReadDiffIntervalReg1 <= not We and Stb and Cyc and not PreReadAckIntervalReg1;
		else
			ReadDiffIntervalReg1 <= '0';
		end if;
	end process;
	
	SyncPartIntervalReg1 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckIntervalReg1 <= '0';
			PreWriteAckIntervalReg1 <= '0';
			WRegIntervalReg1_Interval <= (others => '0');
		elsif rising_edge(Clk) then
			PreWriteAckIntervalReg1 <= WriteDiffIntervalReg1;
			PreReadAckIntervalReg1 <= ReadDiffIntervalReg1;
			if (WriteDiffIntervalReg1 = '1') then
				if (Sel(3) = '1') then WRegIntervalReg1_Interval(31 downto 24) <= DatIn(31 downto 24); end if;
				if (Sel(2) = '1') then WRegIntervalReg1_Interval(23 downto 16) <= DatIn(23 downto 16); end if;
				if (Sel(1) = '1') then WRegIntervalReg1_Interval(15 downto 8) <= DatIn(15 downto 8); end if;
				if (Sel(0) = '1') then WRegIntervalReg1_Interval(7 downto 0) <= DatIn(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForIntervalReg1 : process (
		WRegIntervalReg1_Interval
	) begin
		PreDatOutIntervalReg1 <= (others => '0');
		PreDatOutIntervalReg1(31 downto 0) <= WRegIntervalReg1_Interval;
	end process;
	
	IntervalReg1_Interval <= WRegIntervalReg1_Interval;
	
	PreMatchReadIntervalReg2Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(INTERVALREG2_ADDRESS)) then
			PreMatchReadIntervalReg2 <= not We and Stb and Cyc;
		else
			PreMatchReadIntervalReg2 <= '0';
		end if;
	end process;
	
	PreMatchWriteIntervalReg2Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(INTERVALREG2_ADDRESS)) then
			PreMatchWriteIntervalReg2 <= We and Stb and Cyc;
		else
			PreMatchWriteIntervalReg2 <= '0';
		end if;
	end process;
	
	WriteDiffIntervalReg2Process : process (Adr, We, Stb, Cyc, PreWriteAckIntervalReg2)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(INTERVALREG2_ADDRESS)) then
			WriteDiffIntervalReg2 <=  We and Stb and Cyc and not PreWriteAckIntervalReg2;
		else
			WriteDiffIntervalReg2 <= '0';
		end if;
	end process;
	
	ReadDiffIntervalReg2Process : process (Adr, We, Stb, Cyc, PreReadAckIntervalReg2)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(INTERVALREG2_ADDRESS)) then
			ReadDiffIntervalReg2 <= not We and Stb and Cyc and not PreReadAckIntervalReg2;
		else
			ReadDiffIntervalReg2 <= '0';
		end if;
	end process;
	
	SyncPartIntervalReg2 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckIntervalReg2 <= '0';
			PreWriteAckIntervalReg2 <= '0';
			WRegIntervalReg2_Interval <= (others => '0');
		elsif rising_edge(Clk) then
			PreWriteAckIntervalReg2 <= WriteDiffIntervalReg2;
			PreReadAckIntervalReg2 <= ReadDiffIntervalReg2;
			if (WriteDiffIntervalReg2 = '1') then
				if (Sel(3) = '1') then WRegIntervalReg2_Interval(31 downto 24) <= DatIn(31 downto 24); end if;
				if (Sel(2) = '1') then WRegIntervalReg2_Interval(23 downto 16) <= DatIn(23 downto 16); end if;
				if (Sel(1) = '1') then WRegIntervalReg2_Interval(15 downto 8) <= DatIn(15 downto 8); end if;
				if (Sel(0) = '1') then WRegIntervalReg2_Interval(7 downto 0) <= DatIn(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForIntervalReg2 : process (
		WRegIntervalReg2_Interval
	) begin
		PreDatOutIntervalReg2 <= (others => '0');
		PreDatOutIntervalReg2(31 downto 0) <= WRegIntervalReg2_Interval;
	end process;
	
	IntervalReg2_Interval <= WRegIntervalReg2_Interval;
	
	PreMatchReadIntervalReg3Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(INTERVALREG3_ADDRESS)) then
			PreMatchReadIntervalReg3 <= not We and Stb and Cyc;
		else
			PreMatchReadIntervalReg3 <= '0';
		end if;
	end process;
	
	PreMatchWriteIntervalReg3Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(INTERVALREG3_ADDRESS)) then
			PreMatchWriteIntervalReg3 <= We and Stb and Cyc;
		else
			PreMatchWriteIntervalReg3 <= '0';
		end if;
	end process;
	
	WriteDiffIntervalReg3Process : process (Adr, We, Stb, Cyc, PreWriteAckIntervalReg3)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(INTERVALREG3_ADDRESS)) then
			WriteDiffIntervalReg3 <=  We and Stb and Cyc and not PreWriteAckIntervalReg3;
		else
			WriteDiffIntervalReg3 <= '0';
		end if;
	end process;
	
	ReadDiffIntervalReg3Process : process (Adr, We, Stb, Cyc, PreReadAckIntervalReg3)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(INTERVALREG3_ADDRESS)) then
			ReadDiffIntervalReg3 <= not We and Stb and Cyc and not PreReadAckIntervalReg3;
		else
			ReadDiffIntervalReg3 <= '0';
		end if;
	end process;
	
	SyncPartIntervalReg3 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckIntervalReg3 <= '0';
			PreWriteAckIntervalReg3 <= '0';
			WRegIntervalReg3_Interval <= (others => '0');
		elsif rising_edge(Clk) then
			PreWriteAckIntervalReg3 <= WriteDiffIntervalReg3;
			PreReadAckIntervalReg3 <= ReadDiffIntervalReg3;
			if (WriteDiffIntervalReg3 = '1') then
				if (Sel(3) = '1') then WRegIntervalReg3_Interval(31 downto 24) <= DatIn(31 downto 24); end if;
				if (Sel(2) = '1') then WRegIntervalReg3_Interval(23 downto 16) <= DatIn(23 downto 16); end if;
				if (Sel(1) = '1') then WRegIntervalReg3_Interval(15 downto 8) <= DatIn(15 downto 8); end if;
				if (Sel(0) = '1') then WRegIntervalReg3_Interval(7 downto 0) <= DatIn(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForIntervalReg3 : process (
		WRegIntervalReg3_Interval
	) begin
		PreDatOutIntervalReg3 <= (others => '0');
		PreDatOutIntervalReg3(31 downto 0) <= WRegIntervalReg3_Interval;
	end process;
	
	IntervalReg3_Interval <= WRegIntervalReg3_Interval;
	
	PreMatchReadReferenceCountReg0Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(REFERENCECOUNTREG0_ADDRESS)) then
			PreMatchReadReferenceCountReg0 <= not We and Stb and Cyc;
		else
			PreMatchReadReferenceCountReg0 <= '0';
		end if;
	end process;
	
	PreMatchWriteReferenceCountReg0Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(REFERENCECOUNTREG0_ADDRESS)) then
			PreMatchWriteReferenceCountReg0 <= We and Stb and Cyc;
		else
			PreMatchWriteReferenceCountReg0 <= '0';
		end if;
	end process;
	
	WriteDiffReferenceCountReg0Process : process (Adr, We, Stb, Cyc, PreWriteAckReferenceCountReg0)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(REFERENCECOUNTREG0_ADDRESS)) then
			WriteDiffReferenceCountReg0 <=  We and Stb and Cyc and not PreWriteAckReferenceCountReg0;
		else
			WriteDiffReferenceCountReg0 <= '0';
		end if;
	end process;
	
	ReadDiffReferenceCountReg0Process : process (Adr, We, Stb, Cyc, PreReadAckReferenceCountReg0)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(REFERENCECOUNTREG0_ADDRESS)) then
			ReadDiffReferenceCountReg0 <= not We and Stb and Cyc and not PreReadAckReferenceCountReg0;
		else
			ReadDiffReferenceCountReg0 <= '0';
		end if;
	end process;
	
	SyncPartReferenceCountReg0 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckReferenceCountReg0 <= '0';
			DelWriteDiffReferenceCountReg0 <= '0'; 
			PreWriteAckReferenceCountReg0 <= '0';
			WRegReferenceCountReg0_Count <= (others => '0');
		elsif rising_edge(Clk) then
			DelWriteDiffReferenceCountReg0 <= WriteDiffReferenceCountReg0;
			PreWriteAckReferenceCountReg0 <= WriteDiffReferenceCountReg0;
			PreReadAckReferenceCountReg0 <= ReadDiffReferenceCountReg0;
			if (WriteDiffReferenceCountReg0 = '1') then
				if (Sel(3) = '1') then WRegReferenceCountReg0_Count(31 downto 24) <= DatIn(31 downto 24); end if;
				if (Sel(2) = '1') then WRegReferenceCountReg0_Count(23 downto 16) <= DatIn(23 downto 16); end if;
				if (Sel(1) = '1') then WRegReferenceCountReg0_Count(15 downto 8) <= DatIn(15 downto 8); end if;
				if (Sel(0) = '1') then WRegReferenceCountReg0_Count(7 downto 0) <= DatIn(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForReferenceCountReg0 : process (
		WRegReferenceCountReg0_Count
	) begin
		PreDatOutReferenceCountReg0 <= (others => '0');
		PreDatOutReferenceCountReg0(31 downto 0) <= WRegReferenceCountReg0_Count;
	end process;
	
	WRegPulseReferenceCountReg0 <= DelWriteDiffReferenceCountReg0;
	
	ReferenceCountReg0_Count <= WRegReferenceCountReg0_Count;
	
	PreMatchReadReferenceCountReg1Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(REFERENCECOUNTREG1_ADDRESS)) then
			PreMatchReadReferenceCountReg1 <= not We and Stb and Cyc;
		else
			PreMatchReadReferenceCountReg1 <= '0';
		end if;
	end process;
	
	PreMatchWriteReferenceCountReg1Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(REFERENCECOUNTREG1_ADDRESS)) then
			PreMatchWriteReferenceCountReg1 <= We and Stb and Cyc;
		else
			PreMatchWriteReferenceCountReg1 <= '0';
		end if;
	end process;
	
	WriteDiffReferenceCountReg1Process : process (Adr, We, Stb, Cyc, PreWriteAckReferenceCountReg1)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(REFERENCECOUNTREG1_ADDRESS)) then
			WriteDiffReferenceCountReg1 <=  We and Stb and Cyc and not PreWriteAckReferenceCountReg1;
		else
			WriteDiffReferenceCountReg1 <= '0';
		end if;
	end process;
	
	ReadDiffReferenceCountReg1Process : process (Adr, We, Stb, Cyc, PreReadAckReferenceCountReg1)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(REFERENCECOUNTREG1_ADDRESS)) then
			ReadDiffReferenceCountReg1 <= not We and Stb and Cyc and not PreReadAckReferenceCountReg1;
		else
			ReadDiffReferenceCountReg1 <= '0';
		end if;
	end process;
	
	SyncPartReferenceCountReg1 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckReferenceCountReg1 <= '0';
			DelWriteDiffReferenceCountReg1 <= '0'; 
			PreWriteAckReferenceCountReg1 <= '0';
			WRegReferenceCountReg1_Count <= (others => '0');
		elsif rising_edge(Clk) then
			DelWriteDiffReferenceCountReg1 <= WriteDiffReferenceCountReg1;
			PreWriteAckReferenceCountReg1 <= WriteDiffReferenceCountReg1;
			PreReadAckReferenceCountReg1 <= ReadDiffReferenceCountReg1;
			if (WriteDiffReferenceCountReg1 = '1') then
				if (Sel(3) = '1') then WRegReferenceCountReg1_Count(31 downto 24) <= DatIn(31 downto 24); end if;
				if (Sel(2) = '1') then WRegReferenceCountReg1_Count(23 downto 16) <= DatIn(23 downto 16); end if;
				if (Sel(1) = '1') then WRegReferenceCountReg1_Count(15 downto 8) <= DatIn(15 downto 8); end if;
				if (Sel(0) = '1') then WRegReferenceCountReg1_Count(7 downto 0) <= DatIn(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForReferenceCountReg1 : process (
		WRegReferenceCountReg1_Count
	) begin
		PreDatOutReferenceCountReg1 <= (others => '0');
		PreDatOutReferenceCountReg1(31 downto 0) <= WRegReferenceCountReg1_Count;
	end process;
	
	WRegPulseReferenceCountReg1 <= DelWriteDiffReferenceCountReg1;
	
	ReferenceCountReg1_Count <= WRegReferenceCountReg1_Count;
	
	PreMatchReadReferenceCountReg2Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(REFERENCECOUNTREG2_ADDRESS)) then
			PreMatchReadReferenceCountReg2 <= not We and Stb and Cyc;
		else
			PreMatchReadReferenceCountReg2 <= '0';
		end if;
	end process;
	
	PreMatchWriteReferenceCountReg2Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(REFERENCECOUNTREG2_ADDRESS)) then
			PreMatchWriteReferenceCountReg2 <= We and Stb and Cyc;
		else
			PreMatchWriteReferenceCountReg2 <= '0';
		end if;
	end process;
	
	WriteDiffReferenceCountReg2Process : process (Adr, We, Stb, Cyc, PreWriteAckReferenceCountReg2)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(REFERENCECOUNTREG2_ADDRESS)) then
			WriteDiffReferenceCountReg2 <=  We and Stb and Cyc and not PreWriteAckReferenceCountReg2;
		else
			WriteDiffReferenceCountReg2 <= '0';
		end if;
	end process;
	
	ReadDiffReferenceCountReg2Process : process (Adr, We, Stb, Cyc, PreReadAckReferenceCountReg2)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(REFERENCECOUNTREG2_ADDRESS)) then
			ReadDiffReferenceCountReg2 <= not We and Stb and Cyc and not PreReadAckReferenceCountReg2;
		else
			ReadDiffReferenceCountReg2 <= '0';
		end if;
	end process;
	
	SyncPartReferenceCountReg2 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckReferenceCountReg2 <= '0';
			DelWriteDiffReferenceCountReg2 <= '0'; 
			PreWriteAckReferenceCountReg2 <= '0';
			WRegReferenceCountReg2_Count <= (others => '0');
		elsif rising_edge(Clk) then
			DelWriteDiffReferenceCountReg2 <= WriteDiffReferenceCountReg2;
			PreWriteAckReferenceCountReg2 <= WriteDiffReferenceCountReg2;
			PreReadAckReferenceCountReg2 <= ReadDiffReferenceCountReg2;
			if (WriteDiffReferenceCountReg2 = '1') then
				if (Sel(3) = '1') then WRegReferenceCountReg2_Count(31 downto 24) <= DatIn(31 downto 24); end if;
				if (Sel(2) = '1') then WRegReferenceCountReg2_Count(23 downto 16) <= DatIn(23 downto 16); end if;
				if (Sel(1) = '1') then WRegReferenceCountReg2_Count(15 downto 8) <= DatIn(15 downto 8); end if;
				if (Sel(0) = '1') then WRegReferenceCountReg2_Count(7 downto 0) <= DatIn(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForReferenceCountReg2 : process (
		WRegReferenceCountReg2_Count
	) begin
		PreDatOutReferenceCountReg2 <= (others => '0');
		PreDatOutReferenceCountReg2(31 downto 0) <= WRegReferenceCountReg2_Count;
	end process;
	
	WRegPulseReferenceCountReg2 <= DelWriteDiffReferenceCountReg2;
	
	ReferenceCountReg2_Count <= WRegReferenceCountReg2_Count;
	
	PreMatchReadReferenceCountReg3Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(REFERENCECOUNTREG3_ADDRESS)) then
			PreMatchReadReferenceCountReg3 <= not We and Stb and Cyc;
		else
			PreMatchReadReferenceCountReg3 <= '0';
		end if;
	end process;
	
	PreMatchWriteReferenceCountReg3Process : process (Adr, We, Stb, Cyc)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(REFERENCECOUNTREG3_ADDRESS)) then
			PreMatchWriteReferenceCountReg3 <= We and Stb and Cyc;
		else
			PreMatchWriteReferenceCountReg3 <= '0';
		end if;
	end process;
	
	WriteDiffReferenceCountReg3Process : process (Adr, We, Stb, Cyc, PreWriteAckReferenceCountReg3)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(REFERENCECOUNTREG3_ADDRESS)) then
			WriteDiffReferenceCountReg3 <=  We and Stb and Cyc and not PreWriteAckReferenceCountReg3;
		else
			WriteDiffReferenceCountReg3 <= '0';
		end if;
	end process;
	
	ReadDiffReferenceCountReg3Process : process (Adr, We, Stb, Cyc, PreReadAckReferenceCountReg3)
	begin
		if ((unsigned(Adr)/4)*4 = unsigned(REFERENCECOUNTREG3_ADDRESS)) then
			ReadDiffReferenceCountReg3 <= not We and Stb and Cyc and not PreReadAckReferenceCountReg3;
		else
			ReadDiffReferenceCountReg3 <= '0';
		end if;
	end process;
	
	SyncPartReferenceCountReg3 : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckReferenceCountReg3 <= '0';
			DelWriteDiffReferenceCountReg3 <= '0'; 
			PreWriteAckReferenceCountReg3 <= '0';
			WRegReferenceCountReg3_Count <= (others => '0');
		elsif rising_edge(Clk) then
			DelWriteDiffReferenceCountReg3 <= WriteDiffReferenceCountReg3;
			PreWriteAckReferenceCountReg3 <= WriteDiffReferenceCountReg3;
			PreReadAckReferenceCountReg3 <= ReadDiffReferenceCountReg3;
			if (WriteDiffReferenceCountReg3 = '1') then
				if (Sel(3) = '1') then WRegReferenceCountReg3_Count(31 downto 24) <= DatIn(31 downto 24); end if;
				if (Sel(2) = '1') then WRegReferenceCountReg3_Count(23 downto 16) <= DatIn(23 downto 16); end if;
				if (Sel(1) = '1') then WRegReferenceCountReg3_Count(15 downto 8) <= DatIn(15 downto 8); end if;
				if (Sel(0) = '1') then WRegReferenceCountReg3_Count(7 downto 0) <= DatIn(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForReferenceCountReg3 : process (
		WRegReferenceCountReg3_Count
	) begin
		PreDatOutReferenceCountReg3 <= (others => '0');
		PreDatOutReferenceCountReg3(31 downto 0) <= WRegReferenceCountReg3_Count;
	end process;
	
	WRegPulseReferenceCountReg3 <= DelWriteDiffReferenceCountReg3;
	
	ReferenceCountReg3_Count <= WRegReferenceCountReg3_Count;
	
end;

library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;

entity InterruptGeneratorIfcBusMonitor is
	port (
		Clk : in std_logic;
		Rst : in std_logic;
		Cyc : in  std_logic;
		Match : in std_logic;
		UnoccupiedAck : out std_logic;
		TimeoutAck : out std_logic
	);
end;

architecture Behavioural of InterruptGeneratorIfcBusMonitor is

	signal CycDelay : std_logic;
	signal PreUnoccupiedAck : std_logic;
	signal PreTimeoutAck : std_logic;
	signal TimeoutCounter : unsigned(9 downto 0);

begin

	CycDetection : process (Clk, Rst)
	begin
		if (Rst = '1') then
			CycDelay <= '0';
		elsif rising_edge(Clk) then
			CycDelay <= Cyc;
		end if;
	end process;

	MatchDetection : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreUnoccupiedAck <= '0';
		elsif rising_edge(Clk) then
			PreUnoccupiedAck <= '0';
			if ((Cyc = '1') and (CycDelay = '1') and (Match = '0')) then
				PreUnoccupiedAck <= not PreUnoccupiedAck;
			end if;
		end if;
	end process;
	
	TimeoutDetection : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreTimeoutAck <= '0';
			TimeoutCounter <= (others => '1');
		elsif rising_edge(Clk) then
			PreTimeoutAck <= '0';
			TimeoutCounter <= (others => '1');
			if ((Cyc = '1') and (CycDelay = '1') and (Match = '1')) then
				if (TimeoutCounter = 0) then
					PreTimeoutAck <= not PreTimeoutAck;
				else
					TimeoutCounter <= TimeoutCounter - 1;
				end if;
			end if;
		end if;
	end process;

	UnoccupiedAck <= PreUnoccupiedAck;
	TimeoutAck <= PreTimeoutAck;
	
end;

library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;

use work.InterruptGeneratorIfcPackage.all;

entity InterruptGeneratorIfcWishbone is
	port (
		Clk : in std_logic;
		Rst : in std_logic;
		WishboneDown : in T_InterruptGeneratorIfcWishboneDown;
		WishboneUp : out T_InterruptGeneratorIfcWishboneUp;
		Trace : out T_InterruptGeneratorIfcTrace;
		InterruptGeneratorBlkDown : out T_InterruptGeneratorIfcInterruptGeneratorBlkDown;
		InterruptGeneratorBlkUp : in T_InterruptGeneratorIfcInterruptGeneratorBlkUp
	);
end;

architecture Behavioural of InterruptGeneratorIfcWishbone is

	signal BlockMatch : std_logic;
	signal UnoccupiedAck : std_logic;
	signal TimeoutAck : std_logic;
	
	signal PreWishboneUp : T_InterruptGeneratorIfcWishboneUp;
	
	signal InterruptGeneratorBlkDatOut : std_logic_vector(31 downto 0);
	signal InterruptGeneratorBlkAck : std_logic;
	signal InterruptGeneratorBlkMatch : std_logic;

begin

	i_InterruptGeneratorIfcBusMonitor : entity work.InterruptGeneratorIfcBusMonitor
		port map (
			Clk => Clk,
			Rst => Rst,
			Cyc => WishboneDown.Cyc,
			Match => BlockMatch,
			UnoccupiedAck => UnoccupiedAck,
			TimeoutAck => TimeoutAck
		);
	
	i_InterruptGeneratorBlk_InterruptGeneratorIfc : entity work.InterruptGeneratorBlk_InterruptGeneratorIfc
		port map (
			Clk => Clk,
			Rst => Rst,
			Adr => WishboneDown.Adr,
			Sel => WishboneDown.Sel,
			DatIn => WishboneDown.DatIn,
			We =>  WishboneDown.We,
			Stb => WishboneDown.Stb,
			Cyc => WishboneDown.Cyc,
			DatOut => InterruptGeneratorBlkDatOut,
			Ack => InterruptGeneratorBlkAck,
			Match => InterruptGeneratorBlkMatch,
			ControlReg_ChannelOperation3 => InterruptGeneratorBlkDown.ControlReg_ChannelOperation3,
			ControlReg_ChannelOperation2 => InterruptGeneratorBlkDown.ControlReg_ChannelOperation2,
			ControlReg_ChannelOperation1 => InterruptGeneratorBlkDown.ControlReg_ChannelOperation1,
			ControlReg_ChannelOperation0 => InterruptGeneratorBlkDown.ControlReg_ChannelOperation0,
			StatusReg_ChannelStatus3 => InterruptGeneratorBlkUp.StatusReg_ChannelStatus3,
			StatusReg_ChannelStatus2 => InterruptGeneratorBlkUp.StatusReg_ChannelStatus2,
			StatusReg_ChannelStatus1 => InterruptGeneratorBlkUp.StatusReg_ChannelStatus1,
			StatusReg_ChannelStatus0 => InterruptGeneratorBlkUp.StatusReg_ChannelStatus0,
			ChargedCountReg0_Count => InterruptGeneratorBlkDown.ChargedCountReg0_Count,
			ChargedCountReg1_Count => InterruptGeneratorBlkDown.ChargedCountReg1_Count,
			ChargedCountReg2_Count => InterruptGeneratorBlkDown.ChargedCountReg2_Count,
			ChargedCountReg3_Count => InterruptGeneratorBlkDown.ChargedCountReg3_Count,
			ActualCountReg0_Count => InterruptGeneratorBlkUp.ActualCountReg0_Count,
			ActualCountReg1_Count => InterruptGeneratorBlkUp.ActualCountReg1_Count,
			ActualCountReg2_Count => InterruptGeneratorBlkUp.ActualCountReg2_Count,
			ActualCountReg3_Count => InterruptGeneratorBlkUp.ActualCountReg3_Count,
			FailureCountReg0_Count => InterruptGeneratorBlkUp.FailureCountReg0_Count,
			FailureCountReg1_Count => InterruptGeneratorBlkUp.FailureCountReg1_Count,
			FailureCountReg2_Count => InterruptGeneratorBlkUp.FailureCountReg2_Count,
			FailureCountReg3_Count => InterruptGeneratorBlkUp.FailureCountReg3_Count,
			IntervalReg0_Interval => InterruptGeneratorBlkDown.IntervalReg0_Interval,
			IntervalReg1_Interval => InterruptGeneratorBlkDown.IntervalReg1_Interval,
			IntervalReg2_Interval => InterruptGeneratorBlkDown.IntervalReg2_Interval,
			IntervalReg3_Interval => InterruptGeneratorBlkDown.IntervalReg3_Interval,
			ReferenceCountReg0_Count => InterruptGeneratorBlkDown.ReferenceCountReg0_Count,
			WRegPulseReferenceCountReg0 => InterruptGeneratorBlkDown.WRegPulseReferenceCountReg0,
			ReferenceCountReg1_Count => InterruptGeneratorBlkDown.ReferenceCountReg1_Count,
			WRegPulseReferenceCountReg1 => InterruptGeneratorBlkDown.WRegPulseReferenceCountReg1,
			ReferenceCountReg2_Count => InterruptGeneratorBlkDown.ReferenceCountReg2_Count,
			WRegPulseReferenceCountReg2 => InterruptGeneratorBlkDown.WRegPulseReferenceCountReg2,
			ReferenceCountReg3_Count => InterruptGeneratorBlkDown.ReferenceCountReg3_Count,
			WRegPulseReferenceCountReg3 => InterruptGeneratorBlkDown.WRegPulseReferenceCountReg3
		);
	
	Trace.WishboneDown <= WishboneDown;
	Trace.WishboneUp <= PreWishboneUp;
	Trace.UnoccupiedAck <= UnoccupiedAck;
	Trace.TimeoutAck <= TimeoutAck;
	
	WishboneUp <= PreWishboneUp;
	
	PreWishboneUp.DatOut <= InterruptGeneratorBlkDatOut;
	
	PreWishboneUp.Ack <= InterruptGeneratorBlkAck
		or UnoccupiedAck 
		or TimeoutAck;
	
	BlockMatch <= InterruptGeneratorBlkMatch;

end;
